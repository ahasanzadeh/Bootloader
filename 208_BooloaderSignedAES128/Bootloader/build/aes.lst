ARM GAS  /tmp/ccj5JV0U.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"aes.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/src/aes.c"
  20              		.section	.text.GF_Mult,"ax",%progbits
  21              		.align	1
  22              		.global	GF_Mult
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	GF_Mult:
  28              	.LFB113:
   1:Core/src/aes.c **** #include "aes.h"
   2:Core/src/aes.c **** 
   3:Core/src/aes.c **** uint8_t GF_Mult(uint8_t a, uint8_t b)
   4:Core/src/aes.c **** {
  29              		.loc 1 4 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 16
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 80B4     		push	{r7}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 4
  37              		.cfi_offset 7, -4
  38 0002 85B0     		sub	sp, sp, #20
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 24
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 0346     		mov	r3, r0
  45 0008 0A46     		mov	r2, r1
  46 000a FB71     		strb	r3, [r7, #7]
  47 000c 1346     		mov	r3, r2
  48 000e BB71     		strb	r3, [r7, #6]
   5:Core/src/aes.c ****     uint8_t result = 0;
  49              		.loc 1 5 13
  50 0010 0023     		movs	r3, #0
  51 0012 FB73     		strb	r3, [r7, #15]
   6:Core/src/aes.c ****     uint8_t shiftEscapesField = 0;
  52              		.loc 1 6 13
ARM GAS  /tmp/ccj5JV0U.s 			page 2


  53 0014 0023     		movs	r3, #0
  54 0016 7B73     		strb	r3, [r7, #13]
  55              	.LBB2:
   7:Core/src/aes.c **** 
   8:Core/src/aes.c ****     // Loop through byte `b`
   9:Core/src/aes.c ****     for (uint8_t i = 0; i < 8; i++)
  56              		.loc 1 9 18
  57 0018 0023     		movs	r3, #0
  58 001a BB73     		strb	r3, [r7, #14]
  59              		.loc 1 9 5
  60 001c 1CE0     		b	.L2
  61              	.L5:
  10:Core/src/aes.c ****     {
  11:Core/src/aes.c ****         // If the LSB is set (i.e. we're not multiplying out by zero for this polynomial term)
  12:Core/src/aes.c ****         // then we xor the result with `a` (i.e. adding the polynomial terms of a)
  13:Core/src/aes.c ****         if (b & 1)
  62              		.loc 1 13 15
  63 001e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
  64 0020 03F00103 		and	r3, r3, #1
  65              		.loc 1 13 12
  66 0024 002B     		cmp	r3, #0
  67 0026 03D0     		beq	.L3
  14:Core/src/aes.c ****         {
  15:Core/src/aes.c ****             result ^= a;
  68              		.loc 1 15 20
  69 0028 FA7B     		ldrb	r2, [r7, #15]
  70 002a FB79     		ldrb	r3, [r7, #7]
  71 002c 5340     		eors	r3, r3, r2
  72 002e FB73     		strb	r3, [r7, #15]
  73              	.L3:
  16:Core/src/aes.c ****         }
  17:Core/src/aes.c **** 
  18:Core/src/aes.c ****         // Double `a`, keeping track of whether that causes `a` to leave the field.
  19:Core/src/aes.c ****         shiftEscapesField = a & 0x80;
  74              		.loc 1 19 27
  75 0030 FB79     		ldrb	r3, [r7, #7]
  76 0032 23F07F03 		bic	r3, r3, #127
  77 0036 7B73     		strb	r3, [r7, #13]
  20:Core/src/aes.c ****         a <<= 1;
  78              		.loc 1 20 11
  79 0038 FB79     		ldrb	r3, [r7, #7]
  80 003a 5B00     		lsls	r3, r3, #1
  81 003c FB71     		strb	r3, [r7, #7]
  21:Core/src/aes.c **** 
  22:Core/src/aes.c ****         // Since the next bit we look at in `b` will represent multiplying the terms in `a`
  23:Core/src/aes.c ****         // by the next power of 2, we can achieve the same result by shifting `a` left.
  24:Core/src/aes.c ****         // If `a` left the field, we need to modulo with irreduciable polynomial term.
  25:Core/src/aes.c ****         if (shiftEscapesField)
  82              		.loc 1 25 12
  83 003e 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
  84 0040 002B     		cmp	r3, #0
  85 0042 03D0     		beq	.L4
  26:Core/src/aes.c ****         {
  27:Core/src/aes.c ****             // Note that we use 0x1b instead of 0x11b. If we weren't taking advantage of
  28:Core/src/aes.c ****             // u8 overflow (i.e. by using u16, we would use the "real" term)
  29:Core/src/aes.c ****             a ^= 0x1b;
  86              		.loc 1 29 15
ARM GAS  /tmp/ccj5JV0U.s 			page 3


  87 0044 FB79     		ldrb	r3, [r7, #7]
  88 0046 83F01B03 		eor	r3, r3, #27
  89 004a FB71     		strb	r3, [r7, #7]
  90              	.L4:
  30:Core/src/aes.c ****         }
  31:Core/src/aes.c **** 
  32:Core/src/aes.c ****         // Shift `b` down in order to look at the next LSB (worth twice as much in the
  33:Core/src/aes.c ****         // multiplication)
  34:Core/src/aes.c ****         b >>= 1;
  91              		.loc 1 34 11
  92 004c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
  93 004e 5B08     		lsrs	r3, r3, #1
  94 0050 BB71     		strb	r3, [r7, #6]
   9:Core/src/aes.c ****     {
  95              		.loc 1 9 33 discriminator 2
  96 0052 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
  97 0054 0133     		adds	r3, r3, #1
  98 0056 BB73     		strb	r3, [r7, #14]
  99              	.L2:
   9:Core/src/aes.c ****     {
 100              		.loc 1 9 27 discriminator 1
 101 0058 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 102 005a 072B     		cmp	r3, #7
 103 005c DFD9     		bls	.L5
 104              	.LBE2:
  35:Core/src/aes.c ****     }
  36:Core/src/aes.c **** 
  37:Core/src/aes.c ****     return result;
 105              		.loc 1 37 12
 106 005e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
  38:Core/src/aes.c **** }
 107              		.loc 1 38 1
 108 0060 1846     		mov	r0, r3
 109 0062 1437     		adds	r7, r7, #20
 110              	.LCFI3:
 111              		.cfi_def_cfa_offset 4
 112 0064 BD46     		mov	sp, r7
 113              	.LCFI4:
 114              		.cfi_def_cfa_register 13
 115              		@ sp needed
 116 0066 5DF8047B 		ldr	r7, [sp], #4
 117              	.LCFI5:
 118              		.cfi_restore 7
 119              		.cfi_def_cfa_offset 0
 120 006a 7047     		bx	lr
 121              		.cfi_endproc
 122              	.LFE113:
 124              		.section	.text.GF_WordAdd,"ax",%progbits
 125              		.align	1
 126              		.global	GF_WordAdd
 127              		.syntax unified
 128              		.thumb
 129              		.thumb_func
 131              	GF_WordAdd:
 132              	.LFB114:
  39:Core/src/aes.c **** 
  40:Core/src/aes.c **** void GF_WordAdd(AES_Column_t a, AES_Column_t b, AES_Column_t dest)
ARM GAS  /tmp/ccj5JV0U.s 			page 4


  41:Core/src/aes.c **** {
 133              		.loc 1 41 1
 134              		.cfi_startproc
 135              		@ args = 0, pretend = 0, frame = 16
 136              		@ frame_needed = 1, uses_anonymous_args = 0
 137              		@ link register save eliminated.
 138 0000 80B4     		push	{r7}
 139              	.LCFI6:
 140              		.cfi_def_cfa_offset 4
 141              		.cfi_offset 7, -4
 142 0002 85B0     		sub	sp, sp, #20
 143              	.LCFI7:
 144              		.cfi_def_cfa_offset 24
 145 0004 00AF     		add	r7, sp, #0
 146              	.LCFI8:
 147              		.cfi_def_cfa_register 7
 148 0006 F860     		str	r0, [r7, #12]
 149 0008 B960     		str	r1, [r7, #8]
 150 000a 7A60     		str	r2, [r7, #4]
  42:Core/src/aes.c ****     dest[0] = a[0] ^ b[0];
 151              		.loc 1 42 16
 152 000c FB68     		ldr	r3, [r7, #12]
 153 000e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 154              		.loc 1 42 23
 155 0010 BB68     		ldr	r3, [r7, #8]
 156 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 157              		.loc 1 42 13
 158 0014 5340     		eors	r3, r3, r2
 159 0016 DAB2     		uxtb	r2, r3
 160 0018 7B68     		ldr	r3, [r7, #4]
 161 001a 1A70     		strb	r2, [r3]
  43:Core/src/aes.c ****     dest[1] = a[1] ^ b[1];
 162              		.loc 1 43 16
 163 001c FB68     		ldr	r3, [r7, #12]
 164 001e 0133     		adds	r3, r3, #1
 165 0020 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 166              		.loc 1 43 23
 167 0022 BB68     		ldr	r3, [r7, #8]
 168 0024 0133     		adds	r3, r3, #1
 169 0026 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 170              		.loc 1 43 9
 171 0028 7B68     		ldr	r3, [r7, #4]
 172 002a 0133     		adds	r3, r3, #1
 173              		.loc 1 43 13
 174 002c 4A40     		eors	r2, r2, r1
 175 002e D2B2     		uxtb	r2, r2
 176 0030 1A70     		strb	r2, [r3]
  44:Core/src/aes.c ****     dest[2] = a[2] ^ b[2];
 177              		.loc 1 44 16
 178 0032 FB68     		ldr	r3, [r7, #12]
 179 0034 0233     		adds	r3, r3, #2
 180 0036 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 181              		.loc 1 44 23
 182 0038 BB68     		ldr	r3, [r7, #8]
 183 003a 0233     		adds	r3, r3, #2
 184 003c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 185              		.loc 1 44 9
ARM GAS  /tmp/ccj5JV0U.s 			page 5


 186 003e 7B68     		ldr	r3, [r7, #4]
 187 0040 0233     		adds	r3, r3, #2
 188              		.loc 1 44 13
 189 0042 4A40     		eors	r2, r2, r1
 190 0044 D2B2     		uxtb	r2, r2
 191 0046 1A70     		strb	r2, [r3]
  45:Core/src/aes.c ****     dest[3] = a[3] ^ b[3];
 192              		.loc 1 45 16
 193 0048 FB68     		ldr	r3, [r7, #12]
 194 004a 0333     		adds	r3, r3, #3
 195 004c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 196              		.loc 1 45 23
 197 004e BB68     		ldr	r3, [r7, #8]
 198 0050 0333     		adds	r3, r3, #3
 199 0052 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 200              		.loc 1 45 9
 201 0054 7B68     		ldr	r3, [r7, #4]
 202 0056 0333     		adds	r3, r3, #3
 203              		.loc 1 45 13
 204 0058 4A40     		eors	r2, r2, r1
 205 005a D2B2     		uxtb	r2, r2
 206 005c 1A70     		strb	r2, [r3]
  46:Core/src/aes.c **** }
 207              		.loc 1 46 1
 208 005e 00BF     		nop
 209 0060 1437     		adds	r7, r7, #20
 210              	.LCFI9:
 211              		.cfi_def_cfa_offset 4
 212 0062 BD46     		mov	sp, r7
 213              	.LCFI10:
 214              		.cfi_def_cfa_register 13
 215              		@ sp needed
 216 0064 5DF8047B 		ldr	r7, [sp], #4
 217              	.LCFI11:
 218              		.cfi_restore 7
 219              		.cfi_def_cfa_offset 0
 220 0068 7047     		bx	lr
 221              		.cfi_endproc
 222              	.LFE114:
 224              		.global	sbox_encrypt
 225              		.section	.rodata.sbox_encrypt,"a"
 226              		.align	2
 229              	sbox_encrypt:
 230 0000 637C777B 		.ascii	"c|w{\362ko\3050\001g+\376\327\253v\312\202\311}\372"
 230      F26B6FC5 
 230      3001672B 
 230      FED7AB76 
 230      CA82C97D 
 231 0015 5947F0AD 		.ascii	"YG\360\255\324\242\257\234\244r\300\267\375\223&6?\367"
 231      D4A2AF9C 
 231      A472C0B7 
 231      FD932636 
 231      3FF7
 232 0027 CC34A5E5 		.ascii	"\3144\245\345\361q\3301\025\004\307#\303\030\226\005"
 232      F171D831 
 232      1504C723 
 232      C3189605 
ARM GAS  /tmp/ccj5JV0U.s 			page 6


 233 0037 9A071280 		.ascii	"\232\007\022\200\342\353'\262u\011\203,\032\033nZ\240"
 233      E2EB27B2 
 233      7509832C 
 233      1A1B6E5A 
 233      A0
 234 0048 523BD6B3 		.ascii	"R;\326\263)\343/\204S\321\000\355 \374\261[j\313\276"
 234      29E32F84 
 234      53D100ED 
 234      20FCB15B 
 234      6ACBBE
 235 005b 394A4C58 		.ascii	"9JLX\317\320\357\252\373CM3\205E\371\002\177P<\237\250"
 235      CFD0EFAA 
 235      FB434D33 
 235      8545F902 
 235      7F503C9F 
 236 0070 51A3408F 		.ascii	"Q\243@\217\222\2358\365\274\266\332!\020\377\363\322"
 236      929D38F5 
 236      BCB6DA21 
 236      10FFF3D2 
 237 0080 CD0C13EC 		.ascii	"\315\014\023\354_\227D\027\304\247~=d]\031s`\201O\334"
 237      5F974417 
 237      C4A77E3D 
 237      645D1973 
 237      60814FDC 
 238 0094 222A9088 		.ascii	"\"*\220\210F\356\270\024\336^\013\333\3402:\012I\006"
 238      46EEB814 
 238      DE5E0BDB 
 238      E0323A0A 
 238      4906
 239 00a6 245CC2D3 		.ascii	"$\\\302\323\254b\221\225\344y\347\3107m\215\325N\251"
 239      AC629195 
 239      E479E7C8 
 239      376D8DD5 
 239      4EA9
 240 00b8 6C56F4EA 		.ascii	"lV\364\352ez\256\010\272x%.\034\246\264\306\350\335"
 240      657AAE08 
 240      BA78252E 
 240      1CA6B4C6 
 240      E8DD
 241 00ca 741F4BBD 		.ascii	"t\037K\275\213\212p>\265fH\003\366\016a5W\271\206\301"
 241      8B8A703E 
 241      B5664803 
 241      F60E6135 
 241      57B986C1 
 242 00de 1D9EE1F8 		.ascii	"\035\236\341\370\230\021i\331\216\224\233\036\207\351"
 242      981169D9 
 242      8E949B1E 
 242      87E9
 243 00ec CE5528DF 		.ascii	"\316U(\337\214\241\211\015\277\346BhA\231-\017\260T"
 243      8CA1890D 
 243      BFE64268 
 243      41992D0F 
 243      B054
 244 00fe BB16     		.ascii	"\273\026"
 245              		.global	sbox_decrypt
 246              		.section	.rodata.sbox_decrypt,"a"
 247              		.align	2
ARM GAS  /tmp/ccj5JV0U.s 			page 7


 250              	sbox_decrypt:
 251 0000 52096AD5 		.ascii	"R\011j\32506\2458\277@\243\236\201\363\327\373|\343"
 251      3036A538 
 251      BF40A39E 
 251      81F3D7FB 
 251      7CE3
 252 0012 39829B2F 		.ascii	"9\202\233/\377\2074\216CD\304\336\351\313T{\2242\246"
 252      FF87348E 
 252      4344C4DE 
 252      E9CB547B 
 252      9432A6
 253 0025 C2233DEE 		.ascii	"\302#=\356L\225\013B\372\303N\010.\241f(\331$\262v["
 253      4C950B42 
 253      FAC34E08 
 253      2EA16628 
 253      D924B276 
 254 003a A2496D8B 		.ascii	"\242Im\213\321%r\370\366d\206h\230\026\324\244\\\314"
 254      D12572F8 
 254      F6648668 
 254      9816D4A4 
 254      5CCC
 255 004c 5D65B692 		.ascii	"]e\266\222lpHP\375\355\271\332^\025FW\247\215\235\204"
 255      6C704850 
 255      FDEDB9DA 
 255      5E154657 
 255      A78D9D84 
 256 0060 90D8AB00 		.ascii	"\220\330\253\000\214\274\323\012\367\344X\005\270\263"
 256      8CBCD30A 
 256      F7E45805 
 256      B8B3
 257 006e 4506D02C 		.ascii	"E\006\320,\036\217\312?\017\002\301\257\275\003\001"
 257      1E8FCA3F 
 257      0F02C1AF 
 257      BD0301
 258 007d 138A6B3A 		.ascii	"\023\212k:\221\021AOg\334\352\227\362\317\316\360\264"
 258      9111414F 
 258      67DCEA97 
 258      F2CFCEF0 
 258      B4
 259 008e E67396AC 		.ascii	"\346s\226\254t\"\347\2555\205\342\3717\350\034u\337"
 259      7422E7AD 
 259      3585E2F9 
 259      37E81C75 
 259      DF
 260 009f 6E47F11A 		.ascii	"nG\361\032q\035)\305\211o\267b\016\252\030\276\033\374"
 260      711D29C5 
 260      896FB762 
 260      0EAA18BE 
 260      1BFC
 261 00b1 563E4BC6 		.ascii	"V>K\306\322y \232\333\300\376x\315Z\364\037\335\250"
 261      D279209A 
 261      DBC0FE78 
 261      CD5AF41F 
 261      DDA8
 262 00c3 338807C7 		.ascii	"3\210\007\3071\261\022\020Y'\200\354_`Q\177\251\031"
 262      31B11210 
 262      592780EC 
ARM GAS  /tmp/ccj5JV0U.s 			page 8


 262      5F60517F 
 262      A919
 263 00d5 B54A0D2D 		.ascii	"\265J\015-\345z\237\223\311\234\357\240\340;M\256*\365"
 263      E57A9F93 
 263      C99CEFA0 
 263      E03B4DAE 
 263      2AF5
 264 00e7 B0C8EBBB 		.ascii	"\260\310\353\273<\203S\231a\027+\004~\272w\326&\341"
 264      3C835399 
 264      61172B04 
 264      7EBA77D6 
 264      26E1
 265 00f9 69146355 		.ascii	"i\024cU!\014}"
 265      210C7D
 266              		.global	Rcon
 267              		.section	.data.Rcon,"aw"
 268              		.align	2
 271              	Rcon:
 272 0000 01000000 		.ascii	"\001\000\000\000"
 273 0004 02000000 		.ascii	"\002\000\000\000"
 274 0008 04000000 		.ascii	"\004\000\000\000"
 275 000c 08000000 		.ascii	"\010\000\000\000"
 276 0010 10000000 		.ascii	"\020\000\000\000"
 277 0014 20000000 		.ascii	" \000\000\000"
 278 0018 40000000 		.ascii	"@\000\000\000"
 279 001c 80000000 		.ascii	"\200\000\000\000"
 280 0020 1B000000 		.ascii	"\033\000\000\000"
 281 0024 36000000 		.ascii	"6\000\000\000"
 282              		.section	.text.AES_KeySchedule128,"ax",%progbits
 283              		.align	1
 284              		.global	AES_KeySchedule128
 285              		.syntax unified
 286              		.thumb
 287              		.thumb_func
 289              	AES_KeySchedule128:
 290              	.LFB115:
  47:Core/src/aes.c **** 
  48:Core/src/aes.c **** // Spec page 16
  49:Core/src/aes.c **** const uint8_t sbox_encrypt[] = {
  50:Core/src/aes.c ****     /*          0     1     2     3     4     5     6     7     8     9     a     b     c     d
  51:Core/src/aes.c ****        e     f */
  52:Core/src/aes.c ****     /* 0 */ 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
  53:Core/src/aes.c ****     0x30,         0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
  54:Core/src/aes.c ****     /* 1 */ 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
  55:Core/src/aes.c ****     0xad,         0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
  56:Core/src/aes.c ****     /* 2 */ 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,
  57:Core/src/aes.c ****     0x34,         0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
  58:Core/src/aes.c ****     /* 3 */ 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
  59:Core/src/aes.c ****     0x07,         0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
  60:Core/src/aes.c ****     /* 4 */ 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
  61:Core/src/aes.c ****     0x52,         0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
  62:Core/src/aes.c ****     /* 5 */ 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
  63:Core/src/aes.c ****     0x6a,         0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
  64:Core/src/aes.c ****     /* 6 */ 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
  65:Core/src/aes.c ****     0x45,         0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
  66:Core/src/aes.c ****     /* 7 */ 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
  67:Core/src/aes.c ****     0xbc,         0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
ARM GAS  /tmp/ccj5JV0U.s 			page 9


  68:Core/src/aes.c ****     /* 8 */ 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
  69:Core/src/aes.c ****     0xc4,         0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
  70:Core/src/aes.c ****     /* 9 */ 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
  71:Core/src/aes.c ****     0x46,         0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
  72:Core/src/aes.c ****     /* a */ 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
  73:Core/src/aes.c ****     0xc2,         0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
  74:Core/src/aes.c ****     /* b */ 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
  75:Core/src/aes.c ****     0x6c,         0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
  76:Core/src/aes.c ****     /* c */ 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
  77:Core/src/aes.c ****     0xe8,         0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
  78:Core/src/aes.c ****     /* d */ 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
  79:Core/src/aes.c ****     0x61,         0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
  80:Core/src/aes.c ****     /* e */ 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
  81:Core/src/aes.c ****     0x9b,         0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
  82:Core/src/aes.c ****     /* f */ 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
  83:Core/src/aes.c ****     0x41,         0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
  84:Core/src/aes.c **** };
  85:Core/src/aes.c **** 
  86:Core/src/aes.c **** // Spec page 22
  87:Core/src/aes.c **** const uint8_t sbox_decrypt[] = {
  88:Core/src/aes.c ****     /*          0     1     2     3     4     5     6     7     8     9     a     b     c     d
  89:Core/src/aes.c ****        e     f */
  90:Core/src/aes.c ****     /* 0 */ 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38,
  91:Core/src/aes.c ****     0xbf,         0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
  92:Core/src/aes.c ****     /* 1 */ 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87,
  93:Core/src/aes.c ****     0x34,         0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
  94:Core/src/aes.c ****     /* 2 */ 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d,
  95:Core/src/aes.c ****     0xee,         0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
  96:Core/src/aes.c ****     /* 3 */ 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2,
  97:Core/src/aes.c ****     0x76,         0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
  98:Core/src/aes.c ****     /* 4 */ 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16,
  99:Core/src/aes.c ****     0xd4,         0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
 100:Core/src/aes.c ****     /* 5 */ 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda,
 101:Core/src/aes.c ****     0x5e,         0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
 102:Core/src/aes.c ****     /* 6 */ 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a,
 103:Core/src/aes.c ****     0xf7,         0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
 104:Core/src/aes.c ****     /* 7 */ 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02,
 105:Core/src/aes.c ****     0xc1,         0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
 106:Core/src/aes.c ****     /* 8 */ 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea,
 107:Core/src/aes.c ****     0x97,         0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
 108:Core/src/aes.c ****     /* 9 */ 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85,
 109:Core/src/aes.c ****     0xe2,         0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
 110:Core/src/aes.c ****     /* a */ 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89,
 111:Core/src/aes.c ****     0x6f,         0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
 112:Core/src/aes.c ****     /* b */ 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20,
 113:Core/src/aes.c ****     0x9a,         0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
 114:Core/src/aes.c ****     /* c */ 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31,
 115:Core/src/aes.c ****     0xb1,         0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
 116:Core/src/aes.c ****     /* d */ 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d,
 117:Core/src/aes.c ****     0x2d,         0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
 118:Core/src/aes.c ****     /* e */ 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0,
 119:Core/src/aes.c ****     0xc8,         0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
 120:Core/src/aes.c ****     /* f */ 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26,
 121:Core/src/aes.c ****     0xe1,         0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
 122:Core/src/aes.c **** };
 123:Core/src/aes.c **** 
 124:Core/src/aes.c **** // Spec Appendix A1
ARM GAS  /tmp/ccj5JV0U.s 			page 10


 125:Core/src/aes.c **** AES_Column_t Rcon[] = {
 126:Core/src/aes.c ****     {0x01, 0x00, 0x00, 0x00},
 127:Core/src/aes.c ****     {0x02, 0x00, 0x00, 0x00},
 128:Core/src/aes.c ****     {0x04, 0x00, 0x00, 0x00},
 129:Core/src/aes.c ****     {0x08, 0x00, 0x00, 0x00},
 130:Core/src/aes.c ****     {0x10, 0x00, 0x00, 0x00},
 131:Core/src/aes.c ****     {0x20, 0x00, 0x00, 0x00},
 132:Core/src/aes.c ****     {0x40, 0x00, 0x00, 0x00},
 133:Core/src/aes.c ****     {0x80, 0x00, 0x00, 0x00},
 134:Core/src/aes.c ****     {0x1b, 0x00, 0x00, 0x00},
 135:Core/src/aes.c ****     {0x36, 0x00, 0x00, 0x00},
 136:Core/src/aes.c **** };
 137:Core/src/aes.c **** 
 138:Core/src/aes.c **** void AES_KeySchedule128(const AES_Key128_t key, AES_Block_t* keysOut)
 139:Core/src/aes.c **** {
 291              		.loc 1 139 1
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 24
 294              		@ frame_needed = 1, uses_anonymous_args = 0
 295 0000 80B5     		push	{r7, lr}
 296              	.LCFI12:
 297              		.cfi_def_cfa_offset 8
 298              		.cfi_offset 7, -8
 299              		.cfi_offset 14, -4
 300 0002 86B0     		sub	sp, sp, #24
 301              	.LCFI13:
 302              		.cfi_def_cfa_offset 32
 303 0004 00AF     		add	r7, sp, #0
 304              	.LCFI14:
 305              		.cfi_def_cfa_register 7
 306 0006 7860     		str	r0, [r7, #4]
 307 0008 3960     		str	r1, [r7]
 140:Core/src/aes.c ****     // Track which round key we're on
 141:Core/src/aes.c ****     AES_Block_t* currentRoundKey = keysOut;
 308              		.loc 1 141 18
 309 000a 3B68     		ldr	r3, [r7]
 310 000c 7B61     		str	r3, [r7, #20]
 142:Core/src/aes.c **** 
 143:Core/src/aes.c ****     // The first round key is the key itself
 144:Core/src/aes.c ****     memcpy(currentRoundKey, key, sizeof(AES_Block_t));
 311              		.loc 1 144 5
 312 000e 1022     		movs	r2, #16
 313 0010 7968     		ldr	r1, [r7, #4]
 314 0012 7869     		ldr	r0, [r7, #20]
 315 0014 FFF7FEFF 		bl	memcpy
 145:Core/src/aes.c **** 
 146:Core/src/aes.c ****     // Point to the first computed round key
 147:Core/src/aes.c ****     AES_Block_t* nextRoundKey = currentRoundKey + 1;
 316              		.loc 1 147 18
 317 0018 7B69     		ldr	r3, [r7, #20]
 318 001a 1033     		adds	r3, r3, #16
 319 001c 3B61     		str	r3, [r7, #16]
 148:Core/src/aes.c **** 
 149:Core/src/aes.c ****     // Temporary copy of the 3rd column
 150:Core/src/aes.c ****     AES_Column_t col3;
 151:Core/src/aes.c ****     memcpy(col3, (*currentRoundKey)[3], sizeof(AES_Column_t));
 320              		.loc 1 151 36
ARM GAS  /tmp/ccj5JV0U.s 			page 11


 321 001e 7B69     		ldr	r3, [r7, #20]
 322 0020 0C33     		adds	r3, r3, #12
 323              		.loc 1 151 5
 324 0022 1B68     		ldr	r3, [r3]	@ unaligned
 325 0024 BB60     		str	r3, [r7, #8]
 326              	.LBB3:
 152:Core/src/aes.c **** 
 153:Core/src/aes.c ****     for (size_t i = 0; i < NUM_ROUND_KEYS_128 - 1; i++)
 327              		.loc 1 153 17
 328 0026 0023     		movs	r3, #0
 329 0028 FB60     		str	r3, [r7, #12]
 330              		.loc 1 153 5
 331 002a 46E0     		b	.L9
 332              	.L10:
 154:Core/src/aes.c ****     {
 155:Core/src/aes.c ****         // Modify the last column of the round key
 156:Core/src/aes.c ****         AES_RotWord(col3);
 333              		.loc 1 156 9
 334 002c 07F10803 		add	r3, r7, #8
 335 0030 1846     		mov	r0, r3
 336 0032 FFF7FEFF 		bl	AES_RotWord
 157:Core/src/aes.c ****         AES_SubWord(col3, sbox_encrypt);
 337              		.loc 1 157 9
 338 0036 07F10803 		add	r3, r7, #8
 339 003a 2449     		ldr	r1, .L11
 340 003c 1846     		mov	r0, r3
 341 003e FFF7FEFF 		bl	AES_SubWord
 158:Core/src/aes.c ****         GF_WordAdd(col3, Rcon[i], col3);
 342              		.loc 1 158 30
 343 0042 FB68     		ldr	r3, [r7, #12]
 344 0044 9B00     		lsls	r3, r3, #2
 345 0046 224A     		ldr	r2, .L11+4
 346 0048 9918     		adds	r1, r3, r2
 347              		.loc 1 158 9
 348 004a 07F10802 		add	r2, r7, #8
 349 004e 07F10803 		add	r3, r7, #8
 350 0052 1846     		mov	r0, r3
 351 0054 FFF7FEFF 		bl	GF_WordAdd
 159:Core/src/aes.c **** 
 160:Core/src/aes.c ****         // Compute the next round key
 161:Core/src/aes.c ****         GF_WordAdd(col3, (*currentRoundKey)[0], (*nextRoundKey)[0]);
 352              		.loc 1 161 44
 353 0058 7969     		ldr	r1, [r7, #20]
 354              		.loc 1 161 64
 355 005a 3A69     		ldr	r2, [r7, #16]
 356              		.loc 1 161 9
 357 005c 07F10803 		add	r3, r7, #8
 358 0060 1846     		mov	r0, r3
 359 0062 FFF7FEFF 		bl	GF_WordAdd
 162:Core/src/aes.c ****         GF_WordAdd((*nextRoundKey)[0], (*currentRoundKey)[1], (*nextRoundKey)[1]);
 360              		.loc 1 162 35
 361 0066 3869     		ldr	r0, [r7, #16]
 362              		.loc 1 162 58
 363 0068 7B69     		ldr	r3, [r7, #20]
 364 006a 191D     		adds	r1, r3, #4
 365              		.loc 1 162 78
 366 006c 3B69     		ldr	r3, [r7, #16]
ARM GAS  /tmp/ccj5JV0U.s 			page 12


 367 006e 0433     		adds	r3, r3, #4
 368              		.loc 1 162 9
 369 0070 1A46     		mov	r2, r3
 370 0072 FFF7FEFF 		bl	GF_WordAdd
 163:Core/src/aes.c ****         GF_WordAdd((*nextRoundKey)[1], (*currentRoundKey)[2], (*nextRoundKey)[2]);
 371              		.loc 1 163 35
 372 0076 3B69     		ldr	r3, [r7, #16]
 373 0078 181D     		adds	r0, r3, #4
 374              		.loc 1 163 58
 375 007a 7B69     		ldr	r3, [r7, #20]
 376 007c 03F10801 		add	r1, r3, #8
 377              		.loc 1 163 78
 378 0080 3B69     		ldr	r3, [r7, #16]
 379 0082 0833     		adds	r3, r3, #8
 380              		.loc 1 163 9
 381 0084 1A46     		mov	r2, r3
 382 0086 FFF7FEFF 		bl	GF_WordAdd
 164:Core/src/aes.c ****         GF_WordAdd((*nextRoundKey)[2], (*currentRoundKey)[3], (*nextRoundKey)[3]);
 383              		.loc 1 164 35
 384 008a 3B69     		ldr	r3, [r7, #16]
 385 008c 03F10800 		add	r0, r3, #8
 386              		.loc 1 164 58
 387 0090 7B69     		ldr	r3, [r7, #20]
 388 0092 03F10C01 		add	r1, r3, #12
 389              		.loc 1 164 78
 390 0096 3B69     		ldr	r3, [r7, #16]
 391 0098 0C33     		adds	r3, r3, #12
 392              		.loc 1 164 9
 393 009a 1A46     		mov	r2, r3
 394 009c FFF7FEFF 		bl	GF_WordAdd
 165:Core/src/aes.c **** 
 166:Core/src/aes.c ****         // Update the last column for the next round
 167:Core/src/aes.c ****         memcpy(col3, (*nextRoundKey)[3], sizeof(AES_Column_t));
 395              		.loc 1 167 37
 396 00a0 3B69     		ldr	r3, [r7, #16]
 397 00a2 0C33     		adds	r3, r3, #12
 398              		.loc 1 167 9
 399 00a4 1B68     		ldr	r3, [r3]	@ unaligned
 400 00a6 BB60     		str	r3, [r7, #8]
 168:Core/src/aes.c **** 
 169:Core/src/aes.c ****         // Move the current and next round key pointers
 170:Core/src/aes.c ****         currentRoundKey++;
 401              		.loc 1 170 24
 402 00a8 7B69     		ldr	r3, [r7, #20]
 403 00aa 1033     		adds	r3, r3, #16
 404 00ac 7B61     		str	r3, [r7, #20]
 171:Core/src/aes.c ****         nextRoundKey++;
 405              		.loc 1 171 21
 406 00ae 3B69     		ldr	r3, [r7, #16]
 407 00b0 1033     		adds	r3, r3, #16
 408 00b2 3B61     		str	r3, [r7, #16]
 153:Core/src/aes.c ****     {
 409              		.loc 1 153 53 discriminator 3
 410 00b4 FB68     		ldr	r3, [r7, #12]
 411 00b6 0133     		adds	r3, r3, #1
 412 00b8 FB60     		str	r3, [r7, #12]
 413              	.L9:
ARM GAS  /tmp/ccj5JV0U.s 			page 13


 153:Core/src/aes.c ****     {
 414              		.loc 1 153 26 discriminator 1
 415 00ba FB68     		ldr	r3, [r7, #12]
 416 00bc 092B     		cmp	r3, #9
 417 00be B5D9     		bls	.L10
 418              	.LBE3:
 172:Core/src/aes.c ****     }
 173:Core/src/aes.c **** }
 419              		.loc 1 173 1
 420 00c0 00BF     		nop
 421 00c2 00BF     		nop
 422 00c4 1837     		adds	r7, r7, #24
 423              	.LCFI15:
 424              		.cfi_def_cfa_offset 8
 425 00c6 BD46     		mov	sp, r7
 426              	.LCFI16:
 427              		.cfi_def_cfa_register 13
 428              		@ sp needed
 429 00c8 80BD     		pop	{r7, pc}
 430              	.L12:
 431 00ca 00BF     		.align	2
 432              	.L11:
 433 00cc 00000000 		.word	sbox_encrypt
 434 00d0 00000000 		.word	Rcon
 435              		.cfi_endproc
 436              	.LFE115:
 438              		.section	.text.AES_RotWord,"ax",%progbits
 439              		.align	1
 440              		.global	AES_RotWord
 441              		.syntax unified
 442              		.thumb
 443              		.thumb_func
 445              	AES_RotWord:
 446              	.LFB116:
 174:Core/src/aes.c **** 
 175:Core/src/aes.c **** void AES_RotWord(AES_Column_t word)
 176:Core/src/aes.c **** {
 447              		.loc 1 176 1
 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 16
 450              		@ frame_needed = 1, uses_anonymous_args = 0
 451              		@ link register save eliminated.
 452 0000 80B4     		push	{r7}
 453              	.LCFI17:
 454              		.cfi_def_cfa_offset 4
 455              		.cfi_offset 7, -4
 456 0002 85B0     		sub	sp, sp, #20
 457              	.LCFI18:
 458              		.cfi_def_cfa_offset 24
 459 0004 00AF     		add	r7, sp, #0
 460              	.LCFI19:
 461              		.cfi_def_cfa_register 7
 462 0006 7860     		str	r0, [r7, #4]
 177:Core/src/aes.c ****     uint8_t temp = word[0];
 463              		.loc 1 177 13
 464 0008 7B68     		ldr	r3, [r7, #4]
 465 000a 1B78     		ldrb	r3, [r3]
ARM GAS  /tmp/ccj5JV0U.s 			page 14


 466 000c FB73     		strb	r3, [r7, #15]
 178:Core/src/aes.c ****     word[0] = word[1];
 467              		.loc 1 178 13
 468 000e 7B68     		ldr	r3, [r7, #4]
 469 0010 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 470 0012 7B68     		ldr	r3, [r7, #4]
 471 0014 1A70     		strb	r2, [r3]
 179:Core/src/aes.c ****     word[1] = word[2];
 472              		.loc 1 179 9
 473 0016 7B68     		ldr	r3, [r7, #4]
 474 0018 0133     		adds	r3, r3, #1
 475              		.loc 1 179 13
 476 001a 7A68     		ldr	r2, [r7, #4]
 477 001c 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 478 001e 1A70     		strb	r2, [r3]
 180:Core/src/aes.c ****     word[2] = word[3];
 479              		.loc 1 180 9
 480 0020 7B68     		ldr	r3, [r7, #4]
 481 0022 0233     		adds	r3, r3, #2
 482              		.loc 1 180 13
 483 0024 7A68     		ldr	r2, [r7, #4]
 484 0026 D278     		ldrb	r2, [r2, #3]	@ zero_extendqisi2
 485 0028 1A70     		strb	r2, [r3]
 181:Core/src/aes.c ****     word[3] = temp;
 486              		.loc 1 181 9
 487 002a 7B68     		ldr	r3, [r7, #4]
 488 002c 0333     		adds	r3, r3, #3
 489              		.loc 1 181 13
 490 002e FA7B     		ldrb	r2, [r7, #15]
 491 0030 1A70     		strb	r2, [r3]
 182:Core/src/aes.c **** }
 492              		.loc 1 182 1
 493 0032 00BF     		nop
 494 0034 1437     		adds	r7, r7, #20
 495              	.LCFI20:
 496              		.cfi_def_cfa_offset 4
 497 0036 BD46     		mov	sp, r7
 498              	.LCFI21:
 499              		.cfi_def_cfa_register 13
 500              		@ sp needed
 501 0038 5DF8047B 		ldr	r7, [sp], #4
 502              	.LCFI22:
 503              		.cfi_restore 7
 504              		.cfi_def_cfa_offset 0
 505 003c 7047     		bx	lr
 506              		.cfi_endproc
 507              	.LFE116:
 509              		.section	.text.AES_SubBytes,"ax",%progbits
 510              		.align	1
 511              		.global	AES_SubBytes
 512              		.syntax unified
 513              		.thumb
 514              		.thumb_func
 516              	AES_SubBytes:
 517              	.LFB117:
 183:Core/src/aes.c **** 
 184:Core/src/aes.c **** void AES_SubBytes(AES_Block_t state, const uint8_t table[])
ARM GAS  /tmp/ccj5JV0U.s 			page 15


 185:Core/src/aes.c **** {
 518              		.loc 1 185 1
 519              		.cfi_startproc
 520              		@ args = 0, pretend = 0, frame = 24
 521              		@ frame_needed = 1, uses_anonymous_args = 0
 522              		@ link register save eliminated.
 523 0000 80B4     		push	{r7}
 524              	.LCFI23:
 525              		.cfi_def_cfa_offset 4
 526              		.cfi_offset 7, -4
 527 0002 87B0     		sub	sp, sp, #28
 528              	.LCFI24:
 529              		.cfi_def_cfa_offset 32
 530 0004 00AF     		add	r7, sp, #0
 531              	.LCFI25:
 532              		.cfi_def_cfa_register 7
 533 0006 7860     		str	r0, [r7, #4]
 534 0008 3960     		str	r1, [r7]
 535              	.LBB4:
 186:Core/src/aes.c ****     uint8_t index;
 187:Core/src/aes.c ****     for (size_t col = 0; col < 4; col++)
 536              		.loc 1 187 17
 537 000a 0023     		movs	r3, #0
 538 000c 7B61     		str	r3, [r7, #20]
 539              		.loc 1 187 5
 540 000e 1FE0     		b	.L15
 541              	.L18:
 542              	.LBB5:
 188:Core/src/aes.c ****     {
 189:Core/src/aes.c ****         for (size_t row = 0; row < 4; row++)
 543              		.loc 1 189 21
 544 0010 0023     		movs	r3, #0
 545 0012 3B61     		str	r3, [r7, #16]
 546              		.loc 1 189 9
 547 0014 16E0     		b	.L16
 548              	.L17:
 190:Core/src/aes.c ****         {
 191:Core/src/aes.c ****             index = state[col][row];
 549              		.loc 1 191 26
 550 0016 7B69     		ldr	r3, [r7, #20]
 551 0018 9B00     		lsls	r3, r3, #2
 552 001a 7A68     		ldr	r2, [r7, #4]
 553 001c 1A44     		add	r2, r2, r3
 554              		.loc 1 191 19
 555 001e 3B69     		ldr	r3, [r7, #16]
 556 0020 1344     		add	r3, r3, r2
 557 0022 1B78     		ldrb	r3, [r3]
 558 0024 FB73     		strb	r3, [r7, #15]
 192:Core/src/aes.c ****             state[col][row] = table[index];
 559              		.loc 1 192 36
 560 0026 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 561 0028 3A68     		ldr	r2, [r7]
 562 002a 1344     		add	r3, r3, r2
 563              		.loc 1 192 18
 564 002c 7A69     		ldr	r2, [r7, #20]
 565 002e 9200     		lsls	r2, r2, #2
 566 0030 7968     		ldr	r1, [r7, #4]
ARM GAS  /tmp/ccj5JV0U.s 			page 16


 567 0032 0A44     		add	r2, r2, r1
 568              		.loc 1 192 36
 569 0034 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 570              		.loc 1 192 29
 571 0036 3B69     		ldr	r3, [r7, #16]
 572 0038 1344     		add	r3, r3, r2
 573 003a 0A46     		mov	r2, r1
 574 003c 1A70     		strb	r2, [r3]
 189:Core/src/aes.c ****         {
 575              		.loc 1 189 42 discriminator 3
 576 003e 3B69     		ldr	r3, [r7, #16]
 577 0040 0133     		adds	r3, r3, #1
 578 0042 3B61     		str	r3, [r7, #16]
 579              	.L16:
 189:Core/src/aes.c ****         {
 580              		.loc 1 189 34 discriminator 1
 581 0044 3B69     		ldr	r3, [r7, #16]
 582 0046 032B     		cmp	r3, #3
 583 0048 E5D9     		bls	.L17
 584              	.LBE5:
 187:Core/src/aes.c ****     {
 585              		.loc 1 187 38 discriminator 2
 586 004a 7B69     		ldr	r3, [r7, #20]
 587 004c 0133     		adds	r3, r3, #1
 588 004e 7B61     		str	r3, [r7, #20]
 589              	.L15:
 187:Core/src/aes.c ****     {
 590              		.loc 1 187 30 discriminator 1
 591 0050 7B69     		ldr	r3, [r7, #20]
 592 0052 032B     		cmp	r3, #3
 593 0054 DCD9     		bls	.L18
 594              	.LBE4:
 193:Core/src/aes.c ****         }
 194:Core/src/aes.c ****     }
 195:Core/src/aes.c **** }
 595              		.loc 1 195 1
 596 0056 00BF     		nop
 597 0058 00BF     		nop
 598 005a 1C37     		adds	r7, r7, #28
 599              	.LCFI26:
 600              		.cfi_def_cfa_offset 4
 601 005c BD46     		mov	sp, r7
 602              	.LCFI27:
 603              		.cfi_def_cfa_register 13
 604              		@ sp needed
 605 005e 5DF8047B 		ldr	r7, [sp], #4
 606              	.LCFI28:
 607              		.cfi_restore 7
 608              		.cfi_def_cfa_offset 0
 609 0062 7047     		bx	lr
 610              		.cfi_endproc
 611              	.LFE117:
 613              		.section	.text.AES_SubWord,"ax",%progbits
 614              		.align	1
 615              		.global	AES_SubWord
 616              		.syntax unified
 617              		.thumb
ARM GAS  /tmp/ccj5JV0U.s 			page 17


 618              		.thumb_func
 620              	AES_SubWord:
 621              	.LFB118:
 196:Core/src/aes.c **** 
 197:Core/src/aes.c **** void AES_SubWord(AES_Column_t word, const uint8_t table[])
 198:Core/src/aes.c **** {
 622              		.loc 1 198 1
 623              		.cfi_startproc
 624              		@ args = 0, pretend = 0, frame = 16
 625              		@ frame_needed = 1, uses_anonymous_args = 0
 626              		@ link register save eliminated.
 627 0000 80B4     		push	{r7}
 628              	.LCFI29:
 629              		.cfi_def_cfa_offset 4
 630              		.cfi_offset 7, -4
 631 0002 85B0     		sub	sp, sp, #20
 632              	.LCFI30:
 633              		.cfi_def_cfa_offset 24
 634 0004 00AF     		add	r7, sp, #0
 635              	.LCFI31:
 636              		.cfi_def_cfa_register 7
 637 0006 7860     		str	r0, [r7, #4]
 638 0008 3960     		str	r1, [r7]
 639              	.LBB6:
 199:Core/src/aes.c ****     uint8_t index;
 200:Core/src/aes.c ****     for (size_t i = 0; i < 4; i++)
 640              		.loc 1 200 17
 641 000a 0023     		movs	r3, #0
 642 000c FB60     		str	r3, [r7, #12]
 643              		.loc 1 200 5
 644 000e 0FE0     		b	.L20
 645              	.L21:
 201:Core/src/aes.c ****     {
 202:Core/src/aes.c ****         index = word[i];
 646              		.loc 1 202 21
 647 0010 7A68     		ldr	r2, [r7, #4]
 648 0012 FB68     		ldr	r3, [r7, #12]
 649 0014 1344     		add	r3, r3, r2
 650              		.loc 1 202 15
 651 0016 1B78     		ldrb	r3, [r3]
 652 0018 FB72     		strb	r3, [r7, #11]
 203:Core/src/aes.c ****         word[i] = table[index];
 653              		.loc 1 203 24
 654 001a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 655 001c 3A68     		ldr	r2, [r7]
 656 001e 1A44     		add	r2, r2, r3
 657              		.loc 1 203 13
 658 0020 7968     		ldr	r1, [r7, #4]
 659 0022 FB68     		ldr	r3, [r7, #12]
 660 0024 0B44     		add	r3, r3, r1
 661              		.loc 1 203 24
 662 0026 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 663              		.loc 1 203 17
 664 0028 1A70     		strb	r2, [r3]
 200:Core/src/aes.c ****     {
 665              		.loc 1 200 32 discriminator 3
 666 002a FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccj5JV0U.s 			page 18


 667 002c 0133     		adds	r3, r3, #1
 668 002e FB60     		str	r3, [r7, #12]
 669              	.L20:
 200:Core/src/aes.c ****     {
 670              		.loc 1 200 26 discriminator 1
 671 0030 FB68     		ldr	r3, [r7, #12]
 672 0032 032B     		cmp	r3, #3
 673 0034 ECD9     		bls	.L21
 674              	.LBE6:
 204:Core/src/aes.c ****     }
 205:Core/src/aes.c **** }
 675              		.loc 1 205 1
 676 0036 00BF     		nop
 677 0038 00BF     		nop
 678 003a 1437     		adds	r7, r7, #20
 679              	.LCFI32:
 680              		.cfi_def_cfa_offset 4
 681 003c BD46     		mov	sp, r7
 682              	.LCFI33:
 683              		.cfi_def_cfa_register 13
 684              		@ sp needed
 685 003e 5DF8047B 		ldr	r7, [sp], #4
 686              	.LCFI34:
 687              		.cfi_restore 7
 688              		.cfi_def_cfa_offset 0
 689 0042 7047     		bx	lr
 690              		.cfi_endproc
 691              	.LFE118:
 693              		.section	.text.AES_ShiftRows,"ax",%progbits
 694              		.align	1
 695              		.global	AES_ShiftRows
 696              		.syntax unified
 697              		.thumb
 698              		.thumb_func
 700              	AES_ShiftRows:
 701              	.LFB119:
 206:Core/src/aes.c **** 
 207:Core/src/aes.c **** void AES_ShiftRows(AES_Block_t state)
 208:Core/src/aes.c **** {
 702              		.loc 1 208 1
 703              		.cfi_startproc
 704              		@ args = 0, pretend = 0, frame = 16
 705              		@ frame_needed = 1, uses_anonymous_args = 0
 706              		@ link register save eliminated.
 707 0000 80B4     		push	{r7}
 708              	.LCFI35:
 709              		.cfi_def_cfa_offset 4
 710              		.cfi_offset 7, -4
 711 0002 85B0     		sub	sp, sp, #20
 712              	.LCFI36:
 713              		.cfi_def_cfa_offset 24
 714 0004 00AF     		add	r7, sp, #0
 715              	.LCFI37:
 716              		.cfi_def_cfa_register 7
 717 0006 7860     		str	r0, [r7, #4]
 209:Core/src/aes.c ****     uint8_t temp0;
 210:Core/src/aes.c ****     uint8_t temp1;
ARM GAS  /tmp/ccj5JV0U.s 			page 19


 211:Core/src/aes.c **** 
 212:Core/src/aes.c ****     // This implementation is a little awkward because of storing columns
 213:Core/src/aes.c ****     // in each array of the block instead of rows
 214:Core/src/aes.c **** 
 215:Core/src/aes.c ****     // Shift row 1
 216:Core/src/aes.c ****     // [0] [1] [2] [3] -> [1] [2] [3] [0]
 217:Core/src/aes.c ****     temp0 = state[0][1];
 718              		.loc 1 217 11
 719 0008 7B68     		ldr	r3, [r7, #4]
 720 000a 5B78     		ldrb	r3, [r3, #1]
 721 000c FB73     		strb	r3, [r7, #15]
 218:Core/src/aes.c ****     state[0][1] = state[1][1];
 722              		.loc 1 218 24
 723 000e 7B68     		ldr	r3, [r7, #4]
 724 0010 0433     		adds	r3, r3, #4
 725              		.loc 1 218 27
 726 0012 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 727              		.loc 1 218 17
 728 0014 7B68     		ldr	r3, [r7, #4]
 729 0016 5A70     		strb	r2, [r3, #1]
 219:Core/src/aes.c ****     state[1][1] = state[2][1];
 730              		.loc 1 219 24
 731 0018 7B68     		ldr	r3, [r7, #4]
 732 001a 03F10802 		add	r2, r3, #8
 733              		.loc 1 219 10
 734 001e 7B68     		ldr	r3, [r7, #4]
 735 0020 0433     		adds	r3, r3, #4
 736              		.loc 1 219 27
 737 0022 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 738              		.loc 1 219 17
 739 0024 5A70     		strb	r2, [r3, #1]
 220:Core/src/aes.c ****     state[2][1] = state[3][1];
 740              		.loc 1 220 24
 741 0026 7B68     		ldr	r3, [r7, #4]
 742 0028 03F10C02 		add	r2, r3, #12
 743              		.loc 1 220 10
 744 002c 7B68     		ldr	r3, [r7, #4]
 745 002e 0833     		adds	r3, r3, #8
 746              		.loc 1 220 27
 747 0030 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 748              		.loc 1 220 17
 749 0032 5A70     		strb	r2, [r3, #1]
 221:Core/src/aes.c ****     state[3][1] = temp0;
 750              		.loc 1 221 10
 751 0034 7B68     		ldr	r3, [r7, #4]
 752 0036 0C33     		adds	r3, r3, #12
 753              		.loc 1 221 17
 754 0038 FA7B     		ldrb	r2, [r7, #15]
 755 003a 5A70     		strb	r2, [r3, #1]
 222:Core/src/aes.c **** 
 223:Core/src/aes.c ****     // Shift row 2
 224:Core/src/aes.c ****     // [0] [1] [2] [3] -> [2] [3] [0] [1]
 225:Core/src/aes.c ****     temp0 = state[0][2];
 756              		.loc 1 225 11
 757 003c 7B68     		ldr	r3, [r7, #4]
 758 003e 9B78     		ldrb	r3, [r3, #2]
 759 0040 FB73     		strb	r3, [r7, #15]
ARM GAS  /tmp/ccj5JV0U.s 			page 20


 226:Core/src/aes.c ****     temp1 = state[1][2];
 760              		.loc 1 226 18
 761 0042 7B68     		ldr	r3, [r7, #4]
 762 0044 0433     		adds	r3, r3, #4
 763              		.loc 1 226 11
 764 0046 9B78     		ldrb	r3, [r3, #2]
 765 0048 BB73     		strb	r3, [r7, #14]
 227:Core/src/aes.c ****     state[0][2] = state[2][2];
 766              		.loc 1 227 24
 767 004a 7B68     		ldr	r3, [r7, #4]
 768 004c 0833     		adds	r3, r3, #8
 769              		.loc 1 227 27
 770 004e 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 771              		.loc 1 227 17
 772 0050 7B68     		ldr	r3, [r7, #4]
 773 0052 9A70     		strb	r2, [r3, #2]
 228:Core/src/aes.c ****     state[1][2] = state[3][2];
 774              		.loc 1 228 24
 775 0054 7B68     		ldr	r3, [r7, #4]
 776 0056 03F10C02 		add	r2, r3, #12
 777              		.loc 1 228 10
 778 005a 7B68     		ldr	r3, [r7, #4]
 779 005c 0433     		adds	r3, r3, #4
 780              		.loc 1 228 27
 781 005e 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 782              		.loc 1 228 17
 783 0060 9A70     		strb	r2, [r3, #2]
 229:Core/src/aes.c ****     state[2][2] = temp0;
 784              		.loc 1 229 10
 785 0062 7B68     		ldr	r3, [r7, #4]
 786 0064 0833     		adds	r3, r3, #8
 787              		.loc 1 229 17
 788 0066 FA7B     		ldrb	r2, [r7, #15]
 789 0068 9A70     		strb	r2, [r3, #2]
 230:Core/src/aes.c ****     state[3][2] = temp1;
 790              		.loc 1 230 10
 791 006a 7B68     		ldr	r3, [r7, #4]
 792 006c 0C33     		adds	r3, r3, #12
 793              		.loc 1 230 17
 794 006e BA7B     		ldrb	r2, [r7, #14]
 795 0070 9A70     		strb	r2, [r3, #2]
 231:Core/src/aes.c **** 
 232:Core/src/aes.c ****     // Shift row 3
 233:Core/src/aes.c ****     // [0] [1] [2] [3] -> [3] [0] [1] [2]
 234:Core/src/aes.c ****     temp0 = state[3][3];
 796              		.loc 1 234 18
 797 0072 7B68     		ldr	r3, [r7, #4]
 798 0074 0C33     		adds	r3, r3, #12
 799              		.loc 1 234 11
 800 0076 DB78     		ldrb	r3, [r3, #3]
 801 0078 FB73     		strb	r3, [r7, #15]
 235:Core/src/aes.c ****     state[3][3] = state[2][3];
 802              		.loc 1 235 24
 803 007a 7B68     		ldr	r3, [r7, #4]
 804 007c 03F10802 		add	r2, r3, #8
 805              		.loc 1 235 10
 806 0080 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccj5JV0U.s 			page 21


 807 0082 0C33     		adds	r3, r3, #12
 808              		.loc 1 235 27
 809 0084 D278     		ldrb	r2, [r2, #3]	@ zero_extendqisi2
 810              		.loc 1 235 17
 811 0086 DA70     		strb	r2, [r3, #3]
 236:Core/src/aes.c ****     state[2][3] = state[1][3];
 812              		.loc 1 236 24
 813 0088 7B68     		ldr	r3, [r7, #4]
 814 008a 1A1D     		adds	r2, r3, #4
 815              		.loc 1 236 10
 816 008c 7B68     		ldr	r3, [r7, #4]
 817 008e 0833     		adds	r3, r3, #8
 818              		.loc 1 236 27
 819 0090 D278     		ldrb	r2, [r2, #3]	@ zero_extendqisi2
 820              		.loc 1 236 17
 821 0092 DA70     		strb	r2, [r3, #3]
 237:Core/src/aes.c ****     state[1][3] = state[0][3];
 822              		.loc 1 237 10
 823 0094 7B68     		ldr	r3, [r7, #4]
 824 0096 0433     		adds	r3, r3, #4
 825              		.loc 1 237 27
 826 0098 7A68     		ldr	r2, [r7, #4]
 827 009a D278     		ldrb	r2, [r2, #3]	@ zero_extendqisi2
 828              		.loc 1 237 17
 829 009c DA70     		strb	r2, [r3, #3]
 238:Core/src/aes.c ****     state[0][3] = temp0;
 830              		.loc 1 238 17
 831 009e 7B68     		ldr	r3, [r7, #4]
 832 00a0 FA7B     		ldrb	r2, [r7, #15]
 833 00a2 DA70     		strb	r2, [r3, #3]
 239:Core/src/aes.c **** }
 834              		.loc 1 239 1
 835 00a4 00BF     		nop
 836 00a6 1437     		adds	r7, r7, #20
 837              	.LCFI38:
 838              		.cfi_def_cfa_offset 4
 839 00a8 BD46     		mov	sp, r7
 840              	.LCFI39:
 841              		.cfi_def_cfa_register 13
 842              		@ sp needed
 843 00aa 5DF8047B 		ldr	r7, [sp], #4
 844              	.LCFI40:
 845              		.cfi_restore 7
 846              		.cfi_def_cfa_offset 0
 847 00ae 7047     		bx	lr
 848              		.cfi_endproc
 849              	.LFE119:
 851              		.section	.text.AES_InvShiftRows,"ax",%progbits
 852              		.align	1
 853              		.global	AES_InvShiftRows
 854              		.syntax unified
 855              		.thumb
 856              		.thumb_func
 858              	AES_InvShiftRows:
 859              	.LFB120:
 240:Core/src/aes.c **** 
 241:Core/src/aes.c **** void AES_InvShiftRows(AES_Block_t state)
ARM GAS  /tmp/ccj5JV0U.s 			page 22


 242:Core/src/aes.c **** {
 860              		.loc 1 242 1
 861              		.cfi_startproc
 862              		@ args = 0, pretend = 0, frame = 16
 863              		@ frame_needed = 1, uses_anonymous_args = 0
 864              		@ link register save eliminated.
 865 0000 80B4     		push	{r7}
 866              	.LCFI41:
 867              		.cfi_def_cfa_offset 4
 868              		.cfi_offset 7, -4
 869 0002 85B0     		sub	sp, sp, #20
 870              	.LCFI42:
 871              		.cfi_def_cfa_offset 24
 872 0004 00AF     		add	r7, sp, #0
 873              	.LCFI43:
 874              		.cfi_def_cfa_register 7
 875 0006 7860     		str	r0, [r7, #4]
 243:Core/src/aes.c ****     uint8_t temp0;
 244:Core/src/aes.c ****     uint8_t temp1;
 245:Core/src/aes.c **** 
 246:Core/src/aes.c ****     // Shift row 1
 247:Core/src/aes.c ****     // [0] [1] [2] [3] -> [3] [0] [1] [2]
 248:Core/src/aes.c ****     temp0 = state[3][1];
 876              		.loc 1 248 18
 877 0008 7B68     		ldr	r3, [r7, #4]
 878 000a 0C33     		adds	r3, r3, #12
 879              		.loc 1 248 11
 880 000c 5B78     		ldrb	r3, [r3, #1]
 881 000e FB73     		strb	r3, [r7, #15]
 249:Core/src/aes.c ****     state[3][1] = state[2][1];
 882              		.loc 1 249 24
 883 0010 7B68     		ldr	r3, [r7, #4]
 884 0012 03F10802 		add	r2, r3, #8
 885              		.loc 1 249 10
 886 0016 7B68     		ldr	r3, [r7, #4]
 887 0018 0C33     		adds	r3, r3, #12
 888              		.loc 1 249 27
 889 001a 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 890              		.loc 1 249 17
 891 001c 5A70     		strb	r2, [r3, #1]
 250:Core/src/aes.c ****     state[2][1] = state[1][1];
 892              		.loc 1 250 24
 893 001e 7B68     		ldr	r3, [r7, #4]
 894 0020 1A1D     		adds	r2, r3, #4
 895              		.loc 1 250 10
 896 0022 7B68     		ldr	r3, [r7, #4]
 897 0024 0833     		adds	r3, r3, #8
 898              		.loc 1 250 27
 899 0026 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 900              		.loc 1 250 17
 901 0028 5A70     		strb	r2, [r3, #1]
 251:Core/src/aes.c ****     state[1][1] = state[0][1];
 902              		.loc 1 251 10
 903 002a 7B68     		ldr	r3, [r7, #4]
 904 002c 0433     		adds	r3, r3, #4
 905              		.loc 1 251 27
 906 002e 7A68     		ldr	r2, [r7, #4]
ARM GAS  /tmp/ccj5JV0U.s 			page 23


 907 0030 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 908              		.loc 1 251 17
 909 0032 5A70     		strb	r2, [r3, #1]
 252:Core/src/aes.c ****     state[0][1] = temp0;
 910              		.loc 1 252 17
 911 0034 7B68     		ldr	r3, [r7, #4]
 912 0036 FA7B     		ldrb	r2, [r7, #15]
 913 0038 5A70     		strb	r2, [r3, #1]
 253:Core/src/aes.c **** 
 254:Core/src/aes.c ****     // Shift row 2
 255:Core/src/aes.c ****     // [0] [1] [2] [3] -> [2] [3] [0] [1]
 256:Core/src/aes.c ****     temp0 = state[0][2];
 914              		.loc 1 256 11
 915 003a 7B68     		ldr	r3, [r7, #4]
 916 003c 9B78     		ldrb	r3, [r3, #2]
 917 003e FB73     		strb	r3, [r7, #15]
 257:Core/src/aes.c ****     temp1 = state[1][2];
 918              		.loc 1 257 18
 919 0040 7B68     		ldr	r3, [r7, #4]
 920 0042 0433     		adds	r3, r3, #4
 921              		.loc 1 257 11
 922 0044 9B78     		ldrb	r3, [r3, #2]
 923 0046 BB73     		strb	r3, [r7, #14]
 258:Core/src/aes.c ****     state[0][2] = state[2][2];
 924              		.loc 1 258 24
 925 0048 7B68     		ldr	r3, [r7, #4]
 926 004a 0833     		adds	r3, r3, #8
 927              		.loc 1 258 27
 928 004c 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 929              		.loc 1 258 17
 930 004e 7B68     		ldr	r3, [r7, #4]
 931 0050 9A70     		strb	r2, [r3, #2]
 259:Core/src/aes.c ****     state[1][2] = state[3][2];
 932              		.loc 1 259 24
 933 0052 7B68     		ldr	r3, [r7, #4]
 934 0054 03F10C02 		add	r2, r3, #12
 935              		.loc 1 259 10
 936 0058 7B68     		ldr	r3, [r7, #4]
 937 005a 0433     		adds	r3, r3, #4
 938              		.loc 1 259 27
 939 005c 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 940              		.loc 1 259 17
 941 005e 9A70     		strb	r2, [r3, #2]
 260:Core/src/aes.c ****     state[2][2] = temp0;
 942              		.loc 1 260 10
 943 0060 7B68     		ldr	r3, [r7, #4]
 944 0062 0833     		adds	r3, r3, #8
 945              		.loc 1 260 17
 946 0064 FA7B     		ldrb	r2, [r7, #15]
 947 0066 9A70     		strb	r2, [r3, #2]
 261:Core/src/aes.c ****     state[3][2] = temp1;
 948              		.loc 1 261 10
 949 0068 7B68     		ldr	r3, [r7, #4]
 950 006a 0C33     		adds	r3, r3, #12
 951              		.loc 1 261 17
 952 006c BA7B     		ldrb	r2, [r7, #14]
 953 006e 9A70     		strb	r2, [r3, #2]
ARM GAS  /tmp/ccj5JV0U.s 			page 24


 262:Core/src/aes.c **** 
 263:Core/src/aes.c ****     // Shift row 3
 264:Core/src/aes.c ****     // [0] [1] [2] [3] -> [1] [2] [3] [0]
 265:Core/src/aes.c ****     temp0 = state[0][3];
 954              		.loc 1 265 11
 955 0070 7B68     		ldr	r3, [r7, #4]
 956 0072 DB78     		ldrb	r3, [r3, #3]
 957 0074 FB73     		strb	r3, [r7, #15]
 266:Core/src/aes.c ****     state[0][3] = state[1][3];
 958              		.loc 1 266 24
 959 0076 7B68     		ldr	r3, [r7, #4]
 960 0078 0433     		adds	r3, r3, #4
 961              		.loc 1 266 27
 962 007a DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 963              		.loc 1 266 17
 964 007c 7B68     		ldr	r3, [r7, #4]
 965 007e DA70     		strb	r2, [r3, #3]
 267:Core/src/aes.c ****     state[1][3] = state[2][3];
 966              		.loc 1 267 24
 967 0080 7B68     		ldr	r3, [r7, #4]
 968 0082 03F10802 		add	r2, r3, #8
 969              		.loc 1 267 10
 970 0086 7B68     		ldr	r3, [r7, #4]
 971 0088 0433     		adds	r3, r3, #4
 972              		.loc 1 267 27
 973 008a D278     		ldrb	r2, [r2, #3]	@ zero_extendqisi2
 974              		.loc 1 267 17
 975 008c DA70     		strb	r2, [r3, #3]
 268:Core/src/aes.c ****     state[2][3] = state[3][3];
 976              		.loc 1 268 24
 977 008e 7B68     		ldr	r3, [r7, #4]
 978 0090 03F10C02 		add	r2, r3, #12
 979              		.loc 1 268 10
 980 0094 7B68     		ldr	r3, [r7, #4]
 981 0096 0833     		adds	r3, r3, #8
 982              		.loc 1 268 27
 983 0098 D278     		ldrb	r2, [r2, #3]	@ zero_extendqisi2
 984              		.loc 1 268 17
 985 009a DA70     		strb	r2, [r3, #3]
 269:Core/src/aes.c ****     state[3][3] = temp0;
 986              		.loc 1 269 10
 987 009c 7B68     		ldr	r3, [r7, #4]
 988 009e 0C33     		adds	r3, r3, #12
 989              		.loc 1 269 17
 990 00a0 FA7B     		ldrb	r2, [r7, #15]
 991 00a2 DA70     		strb	r2, [r3, #3]
 270:Core/src/aes.c **** }
 992              		.loc 1 270 1
 993 00a4 00BF     		nop
 994 00a6 1437     		adds	r7, r7, #20
 995              	.LCFI44:
 996              		.cfi_def_cfa_offset 4
 997 00a8 BD46     		mov	sp, r7
 998              	.LCFI45:
 999              		.cfi_def_cfa_register 13
 1000              		@ sp needed
 1001 00aa 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccj5JV0U.s 			page 25


 1002              	.LCFI46:
 1003              		.cfi_restore 7
 1004              		.cfi_def_cfa_offset 0
 1005 00ae 7047     		bx	lr
 1006              		.cfi_endproc
 1007              	.LFE120:
 1009              		.section	.text.AES_MixColumns,"ax",%progbits
 1010              		.align	1
 1011              		.global	AES_MixColumns
 1012              		.syntax unified
 1013              		.thumb
 1014              		.thumb_func
 1016              	AES_MixColumns:
 1017              	.LFB121:
 271:Core/src/aes.c **** 
 272:Core/src/aes.c **** void AES_MixColumns(AES_Block_t state)
 273:Core/src/aes.c **** {
 1018              		.loc 1 273 1
 1019              		.cfi_startproc
 1020              		@ args = 0, pretend = 0, frame = 16
 1021              		@ frame_needed = 1, uses_anonymous_args = 0
 1022 0000 90B5     		push	{r4, r7, lr}
 1023              	.LCFI47:
 1024              		.cfi_def_cfa_offset 12
 1025              		.cfi_offset 4, -12
 1026              		.cfi_offset 7, -8
 1027              		.cfi_offset 14, -4
 1028 0002 85B0     		sub	sp, sp, #20
 1029              	.LCFI48:
 1030              		.cfi_def_cfa_offset 32
 1031 0004 00AF     		add	r7, sp, #0
 1032              	.LCFI49:
 1033              		.cfi_def_cfa_register 7
 1034 0006 7860     		str	r0, [r7, #4]
 274:Core/src/aes.c ****     AES_Column_t temp = {0};
 1035              		.loc 1 274 18
 1036 0008 0023     		movs	r3, #0
 1037 000a BB60     		str	r3, [r7, #8]
 1038              	.LBB7:
 275:Core/src/aes.c **** 
 276:Core/src/aes.c ****     for (size_t i = 0; i < 4; i++)
 1039              		.loc 1 276 17
 1040 000c 0023     		movs	r3, #0
 1041 000e FB60     		str	r3, [r7, #12]
 1042              		.loc 1 276 5
 1043 0010 B0E0     		b	.L25
 1044              	.L26:
 277:Core/src/aes.c ****     {
 278:Core/src/aes.c ****         temp[0] = GF_Mult(0x02, state[i][0]) ^ GF_Mult(0x03, state[i][1]) ^ state[i][2]
 1045              		.loc 1 278 38
 1046 0012 FB68     		ldr	r3, [r7, #12]
 1047 0014 9B00     		lsls	r3, r3, #2
 1048 0016 7A68     		ldr	r2, [r7, #4]
 1049 0018 1344     		add	r3, r3, r2
 1050              		.loc 1 278 19
 1051 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1052 001c 1946     		mov	r1, r3
ARM GAS  /tmp/ccj5JV0U.s 			page 26


 1053 001e 0220     		movs	r0, #2
 1054 0020 FFF7FEFF 		bl	GF_Mult
 1055 0024 0346     		mov	r3, r0
 1056 0026 1C46     		mov	r4, r3
 1057              		.loc 1 278 67 discriminator 1
 1058 0028 FB68     		ldr	r3, [r7, #12]
 1059 002a 9B00     		lsls	r3, r3, #2
 1060 002c 7A68     		ldr	r2, [r7, #4]
 1061 002e 1344     		add	r3, r3, r2
 1062              		.loc 1 278 48 discriminator 1
 1063 0030 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1064 0032 1946     		mov	r1, r3
 1065 0034 0320     		movs	r0, #3
 1066 0036 FFF7FEFF 		bl	GF_Mult
 1067 003a 0346     		mov	r3, r0
 1068              		.loc 1 278 17 discriminator 2
 1069 003c 6340     		eors	r3, r3, r4
 1070 003e DAB2     		uxtb	r2, r3
 1071              		.loc 1 278 82 discriminator 2
 1072 0040 FB68     		ldr	r3, [r7, #12]
 1073 0042 9B00     		lsls	r3, r3, #2
 1074 0044 7968     		ldr	r1, [r7, #4]
 1075 0046 0B44     		add	r3, r3, r1
 1076              		.loc 1 278 85 discriminator 2
 1077 0048 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1078              		.loc 1 278 17 discriminator 2
 1079 004a 5340     		eors	r3, r3, r2
 1080 004c DAB2     		uxtb	r2, r3
 279:Core/src/aes.c ****                 ^ state[i][3];
 1081              		.loc 1 279 24
 1082 004e FB68     		ldr	r3, [r7, #12]
 1083 0050 9B00     		lsls	r3, r3, #2
 1084 0052 7968     		ldr	r1, [r7, #4]
 1085 0054 0B44     		add	r3, r3, r1
 1086              		.loc 1 279 27
 1087 0056 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 278:Core/src/aes.c ****                 ^ state[i][3];
 1088              		.loc 1 278 17
 1089 0058 5340     		eors	r3, r3, r2
 1090 005a DBB2     		uxtb	r3, r3
 1091 005c 3B72     		strb	r3, [r7, #8]
 280:Core/src/aes.c ****         temp[1] = state[i][0] ^ GF_Mult(0x02, state[i][1]) ^ GF_Mult(0x03, state[i][2])
 1092              		.loc 1 280 24
 1093 005e FB68     		ldr	r3, [r7, #12]
 1094 0060 9B00     		lsls	r3, r3, #2
 1095 0062 7A68     		ldr	r2, [r7, #4]
 1096 0064 1344     		add	r3, r3, r2
 1097              		.loc 1 280 27
 1098 0066 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
 1099              		.loc 1 280 52
 1100 0068 FB68     		ldr	r3, [r7, #12]
 1101 006a 9B00     		lsls	r3, r3, #2
 1102 006c 7A68     		ldr	r2, [r7, #4]
 1103 006e 1344     		add	r3, r3, r2
 1104              		.loc 1 280 33
 1105 0070 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1106 0072 1946     		mov	r1, r3
ARM GAS  /tmp/ccj5JV0U.s 			page 27


 1107 0074 0220     		movs	r0, #2
 1108 0076 FFF7FEFF 		bl	GF_Mult
 1109 007a 0346     		mov	r3, r0
 1110              		.loc 1 280 17 discriminator 1
 1111 007c 6340     		eors	r3, r3, r4
 1112 007e DCB2     		uxtb	r4, r3
 1113              		.loc 1 280 81 discriminator 1
 1114 0080 FB68     		ldr	r3, [r7, #12]
 1115 0082 9B00     		lsls	r3, r3, #2
 1116 0084 7A68     		ldr	r2, [r7, #4]
 1117 0086 1344     		add	r3, r3, r2
 1118              		.loc 1 280 62 discriminator 1
 1119 0088 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1120 008a 1946     		mov	r1, r3
 1121 008c 0320     		movs	r0, #3
 1122 008e FFF7FEFF 		bl	GF_Mult
 1123 0092 0346     		mov	r3, r0
 1124              		.loc 1 280 17 discriminator 2
 1125 0094 6340     		eors	r3, r3, r4
 1126 0096 DAB2     		uxtb	r2, r3
 281:Core/src/aes.c ****                 ^ state[i][3];
 1127              		.loc 1 281 24
 1128 0098 FB68     		ldr	r3, [r7, #12]
 1129 009a 9B00     		lsls	r3, r3, #2
 1130 009c 7968     		ldr	r1, [r7, #4]
 1131 009e 0B44     		add	r3, r3, r1
 1132              		.loc 1 281 27
 1133 00a0 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 280:Core/src/aes.c ****         temp[1] = state[i][0] ^ GF_Mult(0x02, state[i][1]) ^ GF_Mult(0x03, state[i][2])
 1134              		.loc 1 280 17
 1135 00a2 5340     		eors	r3, r3, r2
 1136 00a4 DBB2     		uxtb	r3, r3
 1137 00a6 7B72     		strb	r3, [r7, #9]
 282:Core/src/aes.c ****         temp[2] = state[i][0] ^ state[i][1] ^ GF_Mult(0x02, state[i][2])
 1138              		.loc 1 282 24
 1139 00a8 FB68     		ldr	r3, [r7, #12]
 1140 00aa 9B00     		lsls	r3, r3, #2
 1141 00ac 7A68     		ldr	r2, [r7, #4]
 1142 00ae 1344     		add	r3, r3, r2
 1143              		.loc 1 282 27
 1144 00b0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1145              		.loc 1 282 38
 1146 00b2 FB68     		ldr	r3, [r7, #12]
 1147 00b4 9B00     		lsls	r3, r3, #2
 1148 00b6 7968     		ldr	r1, [r7, #4]
 1149 00b8 0B44     		add	r3, r3, r1
 1150              		.loc 1 282 41
 1151 00ba 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1152              		.loc 1 282 17
 1153 00bc 5340     		eors	r3, r3, r2
 1154 00be DCB2     		uxtb	r4, r3
 1155              		.loc 1 282 66
 1156 00c0 FB68     		ldr	r3, [r7, #12]
 1157 00c2 9B00     		lsls	r3, r3, #2
 1158 00c4 7A68     		ldr	r2, [r7, #4]
 1159 00c6 1344     		add	r3, r3, r2
 1160              		.loc 1 282 47
ARM GAS  /tmp/ccj5JV0U.s 			page 28


 1161 00c8 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1162 00ca 1946     		mov	r1, r3
 1163 00cc 0220     		movs	r0, #2
 1164 00ce FFF7FEFF 		bl	GF_Mult
 1165 00d2 0346     		mov	r3, r0
 1166              		.loc 1 282 17 discriminator 1
 1167 00d4 6340     		eors	r3, r3, r4
 1168 00d6 DCB2     		uxtb	r4, r3
 283:Core/src/aes.c ****                 ^ GF_Mult(0x03, state[i][3]);
 1169              		.loc 1 283 38
 1170 00d8 FB68     		ldr	r3, [r7, #12]
 1171 00da 9B00     		lsls	r3, r3, #2
 1172 00dc 7A68     		ldr	r2, [r7, #4]
 1173 00de 1344     		add	r3, r3, r2
 1174              		.loc 1 283 19
 1175 00e0 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1176 00e2 1946     		mov	r1, r3
 1177 00e4 0320     		movs	r0, #3
 1178 00e6 FFF7FEFF 		bl	GF_Mult
 1179 00ea 0346     		mov	r3, r0
 282:Core/src/aes.c ****         temp[2] = state[i][0] ^ state[i][1] ^ GF_Mult(0x02, state[i][2])
 1180              		.loc 1 282 17
 1181 00ec 6340     		eors	r3, r3, r4
 1182 00ee DBB2     		uxtb	r3, r3
 1183 00f0 BB72     		strb	r3, [r7, #10]
 284:Core/src/aes.c ****         temp[3] = GF_Mult(0x03, state[i][0]) ^ state[i][1] ^ state[i][2]
 1184              		.loc 1 284 38
 1185 00f2 FB68     		ldr	r3, [r7, #12]
 1186 00f4 9B00     		lsls	r3, r3, #2
 1187 00f6 7A68     		ldr	r2, [r7, #4]
 1188 00f8 1344     		add	r3, r3, r2
 1189              		.loc 1 284 19
 1190 00fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1191 00fc 1946     		mov	r1, r3
 1192 00fe 0320     		movs	r0, #3
 1193 0100 FFF7FEFF 		bl	GF_Mult
 1194 0104 0346     		mov	r3, r0
 1195 0106 1946     		mov	r1, r3
 1196              		.loc 1 284 53 discriminator 1
 1197 0108 FB68     		ldr	r3, [r7, #12]
 1198 010a 9B00     		lsls	r3, r3, #2
 1199 010c 7A68     		ldr	r2, [r7, #4]
 1200 010e 1344     		add	r3, r3, r2
 1201              		.loc 1 284 56 discriminator 1
 1202 0110 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1203              		.loc 1 284 17 discriminator 1
 1204 0112 4B40     		eors	r3, r3, r1
 1205 0114 DAB2     		uxtb	r2, r3
 1206              		.loc 1 284 67 discriminator 1
 1207 0116 FB68     		ldr	r3, [r7, #12]
 1208 0118 9B00     		lsls	r3, r3, #2
 1209 011a 7968     		ldr	r1, [r7, #4]
 1210 011c 0B44     		add	r3, r3, r1
 1211              		.loc 1 284 70 discriminator 1
 1212 011e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1213              		.loc 1 284 17 discriminator 1
 1214 0120 5340     		eors	r3, r3, r2
ARM GAS  /tmp/ccj5JV0U.s 			page 29


 1215 0122 DCB2     		uxtb	r4, r3
 285:Core/src/aes.c ****                 ^ GF_Mult(0x02, state[i][3]);
 1216              		.loc 1 285 38
 1217 0124 FB68     		ldr	r3, [r7, #12]
 1218 0126 9B00     		lsls	r3, r3, #2
 1219 0128 7A68     		ldr	r2, [r7, #4]
 1220 012a 1344     		add	r3, r3, r2
 1221              		.loc 1 285 19
 1222 012c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1223 012e 1946     		mov	r1, r3
 1224 0130 0220     		movs	r0, #2
 1225 0132 FFF7FEFF 		bl	GF_Mult
 1226 0136 0346     		mov	r3, r0
 284:Core/src/aes.c ****         temp[3] = GF_Mult(0x03, state[i][0]) ^ state[i][1] ^ state[i][2]
 1227              		.loc 1 284 17
 1228 0138 6340     		eors	r3, r3, r4
 1229 013a DBB2     		uxtb	r3, r3
 1230 013c FB72     		strb	r3, [r7, #11]
 286:Core/src/aes.c **** 
 287:Core/src/aes.c ****         state[i][0] = temp[0];
 1231              		.loc 1 287 14
 1232 013e FB68     		ldr	r3, [r7, #12]
 1233 0140 9B00     		lsls	r3, r3, #2
 1234 0142 7A68     		ldr	r2, [r7, #4]
 1235 0144 1344     		add	r3, r3, r2
 1236              		.loc 1 287 27
 1237 0146 3A7A     		ldrb	r2, [r7, #8]	@ zero_extendqisi2
 1238              		.loc 1 287 21
 1239 0148 1A70     		strb	r2, [r3]
 288:Core/src/aes.c ****         state[i][1] = temp[1];
 1240              		.loc 1 288 14
 1241 014a FB68     		ldr	r3, [r7, #12]
 1242 014c 9B00     		lsls	r3, r3, #2
 1243 014e 7A68     		ldr	r2, [r7, #4]
 1244 0150 1344     		add	r3, r3, r2
 1245              		.loc 1 288 27
 1246 0152 7A7A     		ldrb	r2, [r7, #9]	@ zero_extendqisi2
 1247              		.loc 1 288 21
 1248 0154 5A70     		strb	r2, [r3, #1]
 289:Core/src/aes.c ****         state[i][2] = temp[2];
 1249              		.loc 1 289 14
 1250 0156 FB68     		ldr	r3, [r7, #12]
 1251 0158 9B00     		lsls	r3, r3, #2
 1252 015a 7A68     		ldr	r2, [r7, #4]
 1253 015c 1344     		add	r3, r3, r2
 1254              		.loc 1 289 27
 1255 015e BA7A     		ldrb	r2, [r7, #10]	@ zero_extendqisi2
 1256              		.loc 1 289 21
 1257 0160 9A70     		strb	r2, [r3, #2]
 290:Core/src/aes.c ****         state[i][3] = temp[3];
 1258              		.loc 1 290 14
 1259 0162 FB68     		ldr	r3, [r7, #12]
 1260 0164 9B00     		lsls	r3, r3, #2
 1261 0166 7A68     		ldr	r2, [r7, #4]
 1262 0168 1344     		add	r3, r3, r2
 1263              		.loc 1 290 27
 1264 016a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
ARM GAS  /tmp/ccj5JV0U.s 			page 30


 1265              		.loc 1 290 21
 1266 016c DA70     		strb	r2, [r3, #3]
 276:Core/src/aes.c ****     {
 1267              		.loc 1 276 32 discriminator 3
 1268 016e FB68     		ldr	r3, [r7, #12]
 1269 0170 0133     		adds	r3, r3, #1
 1270 0172 FB60     		str	r3, [r7, #12]
 1271              	.L25:
 276:Core/src/aes.c ****     {
 1272              		.loc 1 276 26 discriminator 1
 1273 0174 FB68     		ldr	r3, [r7, #12]
 1274 0176 032B     		cmp	r3, #3
 1275 0178 7FF64BAF 		bls	.L26
 1276              	.LBE7:
 291:Core/src/aes.c ****     }
 292:Core/src/aes.c **** }
 1277              		.loc 1 292 1
 1278 017c 00BF     		nop
 1279 017e 00BF     		nop
 1280 0180 1437     		adds	r7, r7, #20
 1281              	.LCFI50:
 1282              		.cfi_def_cfa_offset 12
 1283 0182 BD46     		mov	sp, r7
 1284              	.LCFI51:
 1285              		.cfi_def_cfa_register 13
 1286              		@ sp needed
 1287 0184 90BD     		pop	{r4, r7, pc}
 1288              		.cfi_endproc
 1289              	.LFE121:
 1291              		.section	.text.AES_InvMixColumns,"ax",%progbits
 1292              		.align	1
 1293              		.global	AES_InvMixColumns
 1294              		.syntax unified
 1295              		.thumb
 1296              		.thumb_func
 1298              	AES_InvMixColumns:
 1299              	.LFB122:
 293:Core/src/aes.c **** 
 294:Core/src/aes.c **** void AES_InvMixColumns(AES_Block_t state)
 295:Core/src/aes.c **** {
 1300              		.loc 1 295 1
 1301              		.cfi_startproc
 1302              		@ args = 0, pretend = 0, frame = 16
 1303              		@ frame_needed = 1, uses_anonymous_args = 0
 1304 0000 90B5     		push	{r4, r7, lr}
 1305              	.LCFI52:
 1306              		.cfi_def_cfa_offset 12
 1307              		.cfi_offset 4, -12
 1308              		.cfi_offset 7, -8
 1309              		.cfi_offset 14, -4
 1310 0002 85B0     		sub	sp, sp, #20
 1311              	.LCFI53:
 1312              		.cfi_def_cfa_offset 32
 1313 0004 00AF     		add	r7, sp, #0
 1314              	.LCFI54:
 1315              		.cfi_def_cfa_register 7
 1316 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccj5JV0U.s 			page 31


 296:Core/src/aes.c ****     AES_Column_t temp = {0};
 1317              		.loc 1 296 18
 1318 0008 0023     		movs	r3, #0
 1319 000a BB60     		str	r3, [r7, #8]
 1320              	.LBB8:
 297:Core/src/aes.c **** 
 298:Core/src/aes.c ****     for (size_t i = 0; i < 4; i++)
 1321              		.loc 1 298 17
 1322 000c 0023     		movs	r3, #0
 1323 000e FB60     		str	r3, [r7, #12]
 1324              		.loc 1 298 5
 1325 0010 DAE0     		b	.L28
 1326              	.L29:
 299:Core/src/aes.c ****     {
 300:Core/src/aes.c ****         temp[0] = GF_Mult(0x0e, state[i][0]) ^ GF_Mult(0x0b, state[i][1])
 1327              		.loc 1 300 38
 1328 0012 FB68     		ldr	r3, [r7, #12]
 1329 0014 9B00     		lsls	r3, r3, #2
 1330 0016 7A68     		ldr	r2, [r7, #4]
 1331 0018 1344     		add	r3, r3, r2
 1332              		.loc 1 300 19
 1333 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1334 001c 1946     		mov	r1, r3
 1335 001e 0E20     		movs	r0, #14
 1336 0020 FFF7FEFF 		bl	GF_Mult
 1337 0024 0346     		mov	r3, r0
 1338 0026 1C46     		mov	r4, r3
 1339              		.loc 1 300 67 discriminator 1
 1340 0028 FB68     		ldr	r3, [r7, #12]
 1341 002a 9B00     		lsls	r3, r3, #2
 1342 002c 7A68     		ldr	r2, [r7, #4]
 1343 002e 1344     		add	r3, r3, r2
 1344              		.loc 1 300 48 discriminator 1
 1345 0030 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1346 0032 1946     		mov	r1, r3
 1347 0034 0B20     		movs	r0, #11
 1348 0036 FFF7FEFF 		bl	GF_Mult
 1349 003a 0346     		mov	r3, r0
 1350              		.loc 1 300 17 discriminator 2
 1351 003c 6340     		eors	r3, r3, r4
 1352 003e DCB2     		uxtb	r4, r3
 301:Core/src/aes.c ****                 ^ GF_Mult(0x0d, state[i][2]) ^ GF_Mult(0x09, state[i][3]);
 1353              		.loc 1 301 38
 1354 0040 FB68     		ldr	r3, [r7, #12]
 1355 0042 9B00     		lsls	r3, r3, #2
 1356 0044 7A68     		ldr	r2, [r7, #4]
 1357 0046 1344     		add	r3, r3, r2
 1358              		.loc 1 301 19
 1359 0048 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1360 004a 1946     		mov	r1, r3
 1361 004c 0D20     		movs	r0, #13
 1362 004e FFF7FEFF 		bl	GF_Mult
 1363 0052 0346     		mov	r3, r0
 300:Core/src/aes.c ****                 ^ GF_Mult(0x0d, state[i][2]) ^ GF_Mult(0x09, state[i][3]);
 1364              		.loc 1 300 17
 1365 0054 6340     		eors	r3, r3, r4
 1366 0056 DCB2     		uxtb	r4, r3
ARM GAS  /tmp/ccj5JV0U.s 			page 32


 1367              		.loc 1 301 67
 1368 0058 FB68     		ldr	r3, [r7, #12]
 1369 005a 9B00     		lsls	r3, r3, #2
 1370 005c 7A68     		ldr	r2, [r7, #4]
 1371 005e 1344     		add	r3, r3, r2
 1372              		.loc 1 301 48
 1373 0060 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1374 0062 1946     		mov	r1, r3
 1375 0064 0920     		movs	r0, #9
 1376 0066 FFF7FEFF 		bl	GF_Mult
 1377 006a 0346     		mov	r3, r0
 300:Core/src/aes.c ****                 ^ GF_Mult(0x0d, state[i][2]) ^ GF_Mult(0x09, state[i][3]);
 1378              		.loc 1 300 17
 1379 006c 6340     		eors	r3, r3, r4
 1380 006e DBB2     		uxtb	r3, r3
 1381 0070 3B72     		strb	r3, [r7, #8]
 302:Core/src/aes.c ****         temp[1] = GF_Mult(0x09, state[i][0]) ^ GF_Mult(0x0e, state[i][1])
 1382              		.loc 1 302 38
 1383 0072 FB68     		ldr	r3, [r7, #12]
 1384 0074 9B00     		lsls	r3, r3, #2
 1385 0076 7A68     		ldr	r2, [r7, #4]
 1386 0078 1344     		add	r3, r3, r2
 1387              		.loc 1 302 19
 1388 007a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1389 007c 1946     		mov	r1, r3
 1390 007e 0920     		movs	r0, #9
 1391 0080 FFF7FEFF 		bl	GF_Mult
 1392 0084 0346     		mov	r3, r0
 1393 0086 1C46     		mov	r4, r3
 1394              		.loc 1 302 67 discriminator 1
 1395 0088 FB68     		ldr	r3, [r7, #12]
 1396 008a 9B00     		lsls	r3, r3, #2
 1397 008c 7A68     		ldr	r2, [r7, #4]
 1398 008e 1344     		add	r3, r3, r2
 1399              		.loc 1 302 48 discriminator 1
 1400 0090 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1401 0092 1946     		mov	r1, r3
 1402 0094 0E20     		movs	r0, #14
 1403 0096 FFF7FEFF 		bl	GF_Mult
 1404 009a 0346     		mov	r3, r0
 1405              		.loc 1 302 17 discriminator 2
 1406 009c 6340     		eors	r3, r3, r4
 1407 009e DCB2     		uxtb	r4, r3
 303:Core/src/aes.c ****                 ^ GF_Mult(0x0b, state[i][2]) ^ GF_Mult(0x0d, state[i][3]);
 1408              		.loc 1 303 38
 1409 00a0 FB68     		ldr	r3, [r7, #12]
 1410 00a2 9B00     		lsls	r3, r3, #2
 1411 00a4 7A68     		ldr	r2, [r7, #4]
 1412 00a6 1344     		add	r3, r3, r2
 1413              		.loc 1 303 19
 1414 00a8 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1415 00aa 1946     		mov	r1, r3
 1416 00ac 0B20     		movs	r0, #11
 1417 00ae FFF7FEFF 		bl	GF_Mult
 1418 00b2 0346     		mov	r3, r0
 302:Core/src/aes.c ****         temp[1] = GF_Mult(0x09, state[i][0]) ^ GF_Mult(0x0e, state[i][1])
 1419              		.loc 1 302 17
ARM GAS  /tmp/ccj5JV0U.s 			page 33


 1420 00b4 6340     		eors	r3, r3, r4
 1421 00b6 DCB2     		uxtb	r4, r3
 1422              		.loc 1 303 67
 1423 00b8 FB68     		ldr	r3, [r7, #12]
 1424 00ba 9B00     		lsls	r3, r3, #2
 1425 00bc 7A68     		ldr	r2, [r7, #4]
 1426 00be 1344     		add	r3, r3, r2
 1427              		.loc 1 303 48
 1428 00c0 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1429 00c2 1946     		mov	r1, r3
 1430 00c4 0D20     		movs	r0, #13
 1431 00c6 FFF7FEFF 		bl	GF_Mult
 1432 00ca 0346     		mov	r3, r0
 302:Core/src/aes.c ****         temp[1] = GF_Mult(0x09, state[i][0]) ^ GF_Mult(0x0e, state[i][1])
 1433              		.loc 1 302 17
 1434 00cc 6340     		eors	r3, r3, r4
 1435 00ce DBB2     		uxtb	r3, r3
 1436 00d0 7B72     		strb	r3, [r7, #9]
 304:Core/src/aes.c ****         temp[2] = GF_Mult(0x0d, state[i][0]) ^ GF_Mult(0x09, state[i][1])
 1437              		.loc 1 304 38
 1438 00d2 FB68     		ldr	r3, [r7, #12]
 1439 00d4 9B00     		lsls	r3, r3, #2
 1440 00d6 7A68     		ldr	r2, [r7, #4]
 1441 00d8 1344     		add	r3, r3, r2
 1442              		.loc 1 304 19
 1443 00da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1444 00dc 1946     		mov	r1, r3
 1445 00de 0D20     		movs	r0, #13
 1446 00e0 FFF7FEFF 		bl	GF_Mult
 1447 00e4 0346     		mov	r3, r0
 1448 00e6 1C46     		mov	r4, r3
 1449              		.loc 1 304 67 discriminator 1
 1450 00e8 FB68     		ldr	r3, [r7, #12]
 1451 00ea 9B00     		lsls	r3, r3, #2
 1452 00ec 7A68     		ldr	r2, [r7, #4]
 1453 00ee 1344     		add	r3, r3, r2
 1454              		.loc 1 304 48 discriminator 1
 1455 00f0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1456 00f2 1946     		mov	r1, r3
 1457 00f4 0920     		movs	r0, #9
 1458 00f6 FFF7FEFF 		bl	GF_Mult
 1459 00fa 0346     		mov	r3, r0
 1460              		.loc 1 304 17 discriminator 2
 1461 00fc 6340     		eors	r3, r3, r4
 1462 00fe DCB2     		uxtb	r4, r3
 305:Core/src/aes.c ****                 ^ GF_Mult(0x0e, state[i][2]) ^ GF_Mult(0x0b, state[i][3]);
 1463              		.loc 1 305 38
 1464 0100 FB68     		ldr	r3, [r7, #12]
 1465 0102 9B00     		lsls	r3, r3, #2
 1466 0104 7A68     		ldr	r2, [r7, #4]
 1467 0106 1344     		add	r3, r3, r2
 1468              		.loc 1 305 19
 1469 0108 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1470 010a 1946     		mov	r1, r3
 1471 010c 0E20     		movs	r0, #14
 1472 010e FFF7FEFF 		bl	GF_Mult
 1473 0112 0346     		mov	r3, r0
ARM GAS  /tmp/ccj5JV0U.s 			page 34


 304:Core/src/aes.c ****         temp[2] = GF_Mult(0x0d, state[i][0]) ^ GF_Mult(0x09, state[i][1])
 1474              		.loc 1 304 17
 1475 0114 6340     		eors	r3, r3, r4
 1476 0116 DCB2     		uxtb	r4, r3
 1477              		.loc 1 305 67
 1478 0118 FB68     		ldr	r3, [r7, #12]
 1479 011a 9B00     		lsls	r3, r3, #2
 1480 011c 7A68     		ldr	r2, [r7, #4]
 1481 011e 1344     		add	r3, r3, r2
 1482              		.loc 1 305 48
 1483 0120 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1484 0122 1946     		mov	r1, r3
 1485 0124 0B20     		movs	r0, #11
 1486 0126 FFF7FEFF 		bl	GF_Mult
 1487 012a 0346     		mov	r3, r0
 304:Core/src/aes.c ****         temp[2] = GF_Mult(0x0d, state[i][0]) ^ GF_Mult(0x09, state[i][1])
 1488              		.loc 1 304 17
 1489 012c 6340     		eors	r3, r3, r4
 1490 012e DBB2     		uxtb	r3, r3
 1491 0130 BB72     		strb	r3, [r7, #10]
 306:Core/src/aes.c ****         temp[3] = GF_Mult(0x0b, state[i][0]) ^ GF_Mult(0x0d, state[i][1])
 1492              		.loc 1 306 38
 1493 0132 FB68     		ldr	r3, [r7, #12]
 1494 0134 9B00     		lsls	r3, r3, #2
 1495 0136 7A68     		ldr	r2, [r7, #4]
 1496 0138 1344     		add	r3, r3, r2
 1497              		.loc 1 306 19
 1498 013a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1499 013c 1946     		mov	r1, r3
 1500 013e 0B20     		movs	r0, #11
 1501 0140 FFF7FEFF 		bl	GF_Mult
 1502 0144 0346     		mov	r3, r0
 1503 0146 1C46     		mov	r4, r3
 1504              		.loc 1 306 67 discriminator 1
 1505 0148 FB68     		ldr	r3, [r7, #12]
 1506 014a 9B00     		lsls	r3, r3, #2
 1507 014c 7A68     		ldr	r2, [r7, #4]
 1508 014e 1344     		add	r3, r3, r2
 1509              		.loc 1 306 48 discriminator 1
 1510 0150 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1511 0152 1946     		mov	r1, r3
 1512 0154 0D20     		movs	r0, #13
 1513 0156 FFF7FEFF 		bl	GF_Mult
 1514 015a 0346     		mov	r3, r0
 1515              		.loc 1 306 17 discriminator 2
 1516 015c 6340     		eors	r3, r3, r4
 1517 015e DCB2     		uxtb	r4, r3
 307:Core/src/aes.c ****                 ^ GF_Mult(0x09, state[i][2]) ^ GF_Mult(0x0e, state[i][3]);
 1518              		.loc 1 307 38
 1519 0160 FB68     		ldr	r3, [r7, #12]
 1520 0162 9B00     		lsls	r3, r3, #2
 1521 0164 7A68     		ldr	r2, [r7, #4]
 1522 0166 1344     		add	r3, r3, r2
 1523              		.loc 1 307 19
 1524 0168 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1525 016a 1946     		mov	r1, r3
 1526 016c 0920     		movs	r0, #9
ARM GAS  /tmp/ccj5JV0U.s 			page 35


 1527 016e FFF7FEFF 		bl	GF_Mult
 1528 0172 0346     		mov	r3, r0
 306:Core/src/aes.c ****         temp[3] = GF_Mult(0x0b, state[i][0]) ^ GF_Mult(0x0d, state[i][1])
 1529              		.loc 1 306 17
 1530 0174 6340     		eors	r3, r3, r4
 1531 0176 DCB2     		uxtb	r4, r3
 1532              		.loc 1 307 67
 1533 0178 FB68     		ldr	r3, [r7, #12]
 1534 017a 9B00     		lsls	r3, r3, #2
 1535 017c 7A68     		ldr	r2, [r7, #4]
 1536 017e 1344     		add	r3, r3, r2
 1537              		.loc 1 307 48
 1538 0180 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1539 0182 1946     		mov	r1, r3
 1540 0184 0E20     		movs	r0, #14
 1541 0186 FFF7FEFF 		bl	GF_Mult
 1542 018a 0346     		mov	r3, r0
 306:Core/src/aes.c ****         temp[3] = GF_Mult(0x0b, state[i][0]) ^ GF_Mult(0x0d, state[i][1])
 1543              		.loc 1 306 17
 1544 018c 6340     		eors	r3, r3, r4
 1545 018e DBB2     		uxtb	r3, r3
 1546 0190 FB72     		strb	r3, [r7, #11]
 308:Core/src/aes.c **** 
 309:Core/src/aes.c ****         state[i][0] = temp[0];
 1547              		.loc 1 309 14
 1548 0192 FB68     		ldr	r3, [r7, #12]
 1549 0194 9B00     		lsls	r3, r3, #2
 1550 0196 7A68     		ldr	r2, [r7, #4]
 1551 0198 1344     		add	r3, r3, r2
 1552              		.loc 1 309 27
 1553 019a 3A7A     		ldrb	r2, [r7, #8]	@ zero_extendqisi2
 1554              		.loc 1 309 21
 1555 019c 1A70     		strb	r2, [r3]
 310:Core/src/aes.c ****         state[i][1] = temp[1];
 1556              		.loc 1 310 14
 1557 019e FB68     		ldr	r3, [r7, #12]
 1558 01a0 9B00     		lsls	r3, r3, #2
 1559 01a2 7A68     		ldr	r2, [r7, #4]
 1560 01a4 1344     		add	r3, r3, r2
 1561              		.loc 1 310 27
 1562 01a6 7A7A     		ldrb	r2, [r7, #9]	@ zero_extendqisi2
 1563              		.loc 1 310 21
 1564 01a8 5A70     		strb	r2, [r3, #1]
 311:Core/src/aes.c ****         state[i][2] = temp[2];
 1565              		.loc 1 311 14
 1566 01aa FB68     		ldr	r3, [r7, #12]
 1567 01ac 9B00     		lsls	r3, r3, #2
 1568 01ae 7A68     		ldr	r2, [r7, #4]
 1569 01b0 1344     		add	r3, r3, r2
 1570              		.loc 1 311 27
 1571 01b2 BA7A     		ldrb	r2, [r7, #10]	@ zero_extendqisi2
 1572              		.loc 1 311 21
 1573 01b4 9A70     		strb	r2, [r3, #2]
 312:Core/src/aes.c ****         state[i][3] = temp[3];
 1574              		.loc 1 312 14
 1575 01b6 FB68     		ldr	r3, [r7, #12]
 1576 01b8 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/ccj5JV0U.s 			page 36


 1577 01ba 7A68     		ldr	r2, [r7, #4]
 1578 01bc 1344     		add	r3, r3, r2
 1579              		.loc 1 312 27
 1580 01be FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1581              		.loc 1 312 21
 1582 01c0 DA70     		strb	r2, [r3, #3]
 298:Core/src/aes.c ****     {
 1583              		.loc 1 298 32 discriminator 3
 1584 01c2 FB68     		ldr	r3, [r7, #12]
 1585 01c4 0133     		adds	r3, r3, #1
 1586 01c6 FB60     		str	r3, [r7, #12]
 1587              	.L28:
 298:Core/src/aes.c ****     {
 1588              		.loc 1 298 26 discriminator 1
 1589 01c8 FB68     		ldr	r3, [r7, #12]
 1590 01ca 032B     		cmp	r3, #3
 1591 01cc 7FF621AF 		bls	.L29
 1592              	.LBE8:
 313:Core/src/aes.c ****     }
 314:Core/src/aes.c **** }
 1593              		.loc 1 314 1
 1594 01d0 00BF     		nop
 1595 01d2 00BF     		nop
 1596 01d4 1437     		adds	r7, r7, #20
 1597              	.LCFI55:
 1598              		.cfi_def_cfa_offset 12
 1599 01d6 BD46     		mov	sp, r7
 1600              	.LCFI56:
 1601              		.cfi_def_cfa_register 13
 1602              		@ sp needed
 1603 01d8 90BD     		pop	{r4, r7, pc}
 1604              		.cfi_endproc
 1605              	.LFE122:
 1607              		.section	.text.AES_AddRoundKey,"ax",%progbits
 1608              		.align	1
 1609              		.global	AES_AddRoundKey
 1610              		.syntax unified
 1611              		.thumb
 1612              		.thumb_func
 1614              	AES_AddRoundKey:
 1615              	.LFB123:
 315:Core/src/aes.c **** 
 316:Core/src/aes.c **** void AES_AddRoundKey(AES_Block_t state, const AES_Block_t roundKey)
 317:Core/src/aes.c **** {
 1616              		.loc 1 317 1
 1617              		.cfi_startproc
 1618              		@ args = 0, pretend = 0, frame = 16
 1619              		@ frame_needed = 1, uses_anonymous_args = 0
 1620              		@ link register save eliminated.
 1621 0000 80B4     		push	{r7}
 1622              	.LCFI57:
 1623              		.cfi_def_cfa_offset 4
 1624              		.cfi_offset 7, -4
 1625 0002 85B0     		sub	sp, sp, #20
 1626              	.LCFI58:
 1627              		.cfi_def_cfa_offset 24
 1628 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccj5JV0U.s 			page 37


 1629              	.LCFI59:
 1630              		.cfi_def_cfa_register 7
 1631 0006 7860     		str	r0, [r7, #4]
 1632 0008 3960     		str	r1, [r7]
 1633              	.LBB9:
 318:Core/src/aes.c ****     for (size_t col = 0; col < 4; col++)
 1634              		.loc 1 318 17
 1635 000a 0023     		movs	r3, #0
 1636 000c FB60     		str	r3, [r7, #12]
 1637              		.loc 1 318 5
 1638 000e 23E0     		b	.L31
 1639              	.L34:
 1640              	.LBB10:
 319:Core/src/aes.c ****     {
 320:Core/src/aes.c ****         for (size_t row = 0; row < 4; row++)
 1641              		.loc 1 320 21
 1642 0010 0023     		movs	r3, #0
 1643 0012 BB60     		str	r3, [r7, #8]
 1644              		.loc 1 320 9
 1645 0014 1AE0     		b	.L32
 1646              	.L33:
 321:Core/src/aes.c ****         {
 322:Core/src/aes.c ****             state[col][row] ^= roundKey[col][row];
 1647              		.loc 1 322 18
 1648 0016 FB68     		ldr	r3, [r7, #12]
 1649 0018 9B00     		lsls	r3, r3, #2
 1650 001a 7A68     		ldr	r2, [r7, #4]
 1651 001c 1A44     		add	r2, r2, r3
 1652              		.loc 1 322 23
 1653 001e BB68     		ldr	r3, [r7, #8]
 1654 0020 1344     		add	r3, r3, r2
 1655 0022 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1656              		.loc 1 322 40
 1657 0024 FB68     		ldr	r3, [r7, #12]
 1658 0026 9B00     		lsls	r3, r3, #2
 1659 0028 3A68     		ldr	r2, [r7]
 1660 002a 1A44     		add	r2, r2, r3
 1661              		.loc 1 322 45
 1662 002c BB68     		ldr	r3, [r7, #8]
 1663 002e 1344     		add	r3, r3, r2
 1664 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1665              		.loc 1 322 18
 1666 0032 FA68     		ldr	r2, [r7, #12]
 1667 0034 9200     		lsls	r2, r2, #2
 1668 0036 7868     		ldr	r0, [r7, #4]
 1669 0038 0244     		add	r2, r2, r0
 1670              		.loc 1 322 29
 1671 003a 4B40     		eors	r3, r3, r1
 1672 003c D9B2     		uxtb	r1, r3
 1673 003e BB68     		ldr	r3, [r7, #8]
 1674 0040 1344     		add	r3, r3, r2
 1675 0042 0A46     		mov	r2, r1
 1676 0044 1A70     		strb	r2, [r3]
 320:Core/src/aes.c ****         {
 1677              		.loc 1 320 42 discriminator 3
 1678 0046 BB68     		ldr	r3, [r7, #8]
 1679 0048 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccj5JV0U.s 			page 38


 1680 004a BB60     		str	r3, [r7, #8]
 1681              	.L32:
 320:Core/src/aes.c ****         {
 1682              		.loc 1 320 34 discriminator 1
 1683 004c BB68     		ldr	r3, [r7, #8]
 1684 004e 032B     		cmp	r3, #3
 1685 0050 E1D9     		bls	.L33
 1686              	.LBE10:
 318:Core/src/aes.c ****     {
 1687              		.loc 1 318 38 discriminator 2
 1688 0052 FB68     		ldr	r3, [r7, #12]
 1689 0054 0133     		adds	r3, r3, #1
 1690 0056 FB60     		str	r3, [r7, #12]
 1691              	.L31:
 318:Core/src/aes.c ****     {
 1692              		.loc 1 318 30 discriminator 1
 1693 0058 FB68     		ldr	r3, [r7, #12]
 1694 005a 032B     		cmp	r3, #3
 1695 005c D8D9     		bls	.L34
 1696              	.LBE9:
 323:Core/src/aes.c ****         }
 324:Core/src/aes.c ****     }
 325:Core/src/aes.c **** }
 1697              		.loc 1 325 1
 1698 005e 00BF     		nop
 1699 0060 00BF     		nop
 1700 0062 1437     		adds	r7, r7, #20
 1701              	.LCFI60:
 1702              		.cfi_def_cfa_offset 4
 1703 0064 BD46     		mov	sp, r7
 1704              	.LCFI61:
 1705              		.cfi_def_cfa_register 13
 1706              		@ sp needed
 1707 0066 5DF8047B 		ldr	r7, [sp], #4
 1708              	.LCFI62:
 1709              		.cfi_restore 7
 1710              		.cfi_def_cfa_offset 0
 1711 006a 7047     		bx	lr
 1712              		.cfi_endproc
 1713              	.LFE123:
 1715              		.section	.text.AES_EncryptBlock,"ax",%progbits
 1716              		.align	1
 1717              		.global	AES_EncryptBlock
 1718              		.syntax unified
 1719              		.thumb
 1720              		.thumb_func
 1722              	AES_EncryptBlock:
 1723              	.LFB124:
 326:Core/src/aes.c **** 
 327:Core/src/aes.c **** void AES_EncryptBlock(AES_Block_t state, const AES_Block_t* keySchedule)
 328:Core/src/aes.c **** {
 1724              		.loc 1 328 1
 1725              		.cfi_startproc
 1726              		@ args = 0, pretend = 0, frame = 16
 1727              		@ frame_needed = 1, uses_anonymous_args = 0
 1728 0000 80B5     		push	{r7, lr}
 1729              	.LCFI63:
ARM GAS  /tmp/ccj5JV0U.s 			page 39


 1730              		.cfi_def_cfa_offset 8
 1731              		.cfi_offset 7, -8
 1732              		.cfi_offset 14, -4
 1733 0002 84B0     		sub	sp, sp, #16
 1734              	.LCFI64:
 1735              		.cfi_def_cfa_offset 24
 1736 0004 00AF     		add	r7, sp, #0
 1737              	.LCFI65:
 1738              		.cfi_def_cfa_register 7
 1739 0006 7860     		str	r0, [r7, #4]
 1740 0008 3960     		str	r1, [r7]
 329:Core/src/aes.c ****     AES_Block_t* roundKey = (AES_Block_t*)keySchedule;
 1741              		.loc 1 329 18
 1742 000a 3B68     		ldr	r3, [r7]
 1743 000c FB60     		str	r3, [r7, #12]
 330:Core/src/aes.c **** 
 331:Core/src/aes.c ****     // Initial round key addition
 332:Core/src/aes.c ****     AES_AddRoundKey(state, *roundKey++);
 1744              		.loc 1 332 5
 1745 000e FB68     		ldr	r3, [r7, #12]
 1746 0010 03F11002 		add	r2, r3, #16
 1747 0014 FA60     		str	r2, [r7, #12]
 1748 0016 1946     		mov	r1, r3
 1749 0018 7868     		ldr	r0, [r7, #4]
 1750 001a FFF7FEFF 		bl	AES_AddRoundKey
 1751              	.LBB11:
 333:Core/src/aes.c **** 
 334:Core/src/aes.c ****     // Note that i starts at 1 since the initial round key is applied already
 335:Core/src/aes.c ****     for (size_t i = 1; i < NUM_ROUND_KEYS_128; i++)
 1752              		.loc 1 335 17
 1753 001e 0123     		movs	r3, #1
 1754 0020 BB60     		str	r3, [r7, #8]
 1755              		.loc 1 335 5
 1756 0022 17E0     		b	.L36
 1757              	.L38:
 336:Core/src/aes.c ****     {
 337:Core/src/aes.c ****         AES_SubBytes(state, sbox_encrypt);
 1758              		.loc 1 337 9
 1759 0024 0F49     		ldr	r1, .L39
 1760 0026 7868     		ldr	r0, [r7, #4]
 1761 0028 FFF7FEFF 		bl	AES_SubBytes
 338:Core/src/aes.c ****         AES_ShiftRows(state);
 1762              		.loc 1 338 9
 1763 002c 7868     		ldr	r0, [r7, #4]
 1764 002e FFF7FEFF 		bl	AES_ShiftRows
 339:Core/src/aes.c **** 
 340:Core/src/aes.c ****         // No column mix in the last round. Not that this implementation should be considered
 341:Core/src/aes.c ****         // for production, but this would constitute a timing based side-channel risk
 342:Core/src/aes.c ****         if (i < NUM_ROUND_KEYS_128 - 1)
 1765              		.loc 1 342 12
 1766 0032 BB68     		ldr	r3, [r7, #8]
 1767 0034 092B     		cmp	r3, #9
 1768 0036 02D8     		bhi	.L37
 343:Core/src/aes.c ****         {
 344:Core/src/aes.c ****             AES_MixColumns(state);
 1769              		.loc 1 344 13
 1770 0038 7868     		ldr	r0, [r7, #4]
ARM GAS  /tmp/ccj5JV0U.s 			page 40


 1771 003a FFF7FEFF 		bl	AES_MixColumns
 1772              	.L37:
 345:Core/src/aes.c ****         }
 346:Core/src/aes.c **** 
 347:Core/src/aes.c ****         AES_AddRoundKey(state, *roundKey++);
 1773              		.loc 1 347 9
 1774 003e FB68     		ldr	r3, [r7, #12]
 1775 0040 03F11002 		add	r2, r3, #16
 1776 0044 FA60     		str	r2, [r7, #12]
 1777 0046 1946     		mov	r1, r3
 1778 0048 7868     		ldr	r0, [r7, #4]
 1779 004a FFF7FEFF 		bl	AES_AddRoundKey
 335:Core/src/aes.c ****     {
 1780              		.loc 1 335 49 discriminator 2
 1781 004e BB68     		ldr	r3, [r7, #8]
 1782 0050 0133     		adds	r3, r3, #1
 1783 0052 BB60     		str	r3, [r7, #8]
 1784              	.L36:
 335:Core/src/aes.c ****     {
 1785              		.loc 1 335 26 discriminator 1
 1786 0054 BB68     		ldr	r3, [r7, #8]
 1787 0056 0A2B     		cmp	r3, #10
 1788 0058 E4D9     		bls	.L38
 1789              	.LBE11:
 348:Core/src/aes.c ****     }
 349:Core/src/aes.c **** }
 1790              		.loc 1 349 1
 1791 005a 00BF     		nop
 1792 005c 00BF     		nop
 1793 005e 1037     		adds	r7, r7, #16
 1794              	.LCFI66:
 1795              		.cfi_def_cfa_offset 8
 1796 0060 BD46     		mov	sp, r7
 1797              	.LCFI67:
 1798              		.cfi_def_cfa_register 13
 1799              		@ sp needed
 1800 0062 80BD     		pop	{r7, pc}
 1801              	.L40:
 1802              		.align	2
 1803              	.L39:
 1804 0064 00000000 		.word	sbox_encrypt
 1805              		.cfi_endproc
 1806              	.LFE124:
 1808              		.section	.text.AES_DecryptBlock,"ax",%progbits
 1809              		.align	1
 1810              		.global	AES_DecryptBlock
 1811              		.syntax unified
 1812              		.thumb
 1813              		.thumb_func
 1815              	AES_DecryptBlock:
 1816              	.LFB125:
 350:Core/src/aes.c **** 
 351:Core/src/aes.c **** void AES_DecryptBlock(AES_Block_t state, const AES_Block_t* keySchedule)
 352:Core/src/aes.c **** {
 1817              		.loc 1 352 1
 1818              		.cfi_startproc
 1819              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/ccj5JV0U.s 			page 41


 1820              		@ frame_needed = 1, uses_anonymous_args = 0
 1821 0000 80B5     		push	{r7, lr}
 1822              	.LCFI68:
 1823              		.cfi_def_cfa_offset 8
 1824              		.cfi_offset 7, -8
 1825              		.cfi_offset 14, -4
 1826 0002 84B0     		sub	sp, sp, #16
 1827              	.LCFI69:
 1828              		.cfi_def_cfa_offset 24
 1829 0004 00AF     		add	r7, sp, #0
 1830              	.LCFI70:
 1831              		.cfi_def_cfa_register 7
 1832 0006 7860     		str	r0, [r7, #4]
 1833 0008 3960     		str	r1, [r7]
 353:Core/src/aes.c ****     AES_Block_t* roundKey = (AES_Block_t*)keySchedule + NUM_ROUND_KEYS_128 - 1;
 1834              		.loc 1 353 18
 1835 000a 3B68     		ldr	r3, [r7]
 1836 000c A033     		adds	r3, r3, #160
 1837 000e FB60     		str	r3, [r7, #12]
 1838              	.LBB12:
 354:Core/src/aes.c **** 
 355:Core/src/aes.c ****     // Note that i starts at 1 since the initial round key is applied already
 356:Core/src/aes.c ****     for (size_t i = 1; i < NUM_ROUND_KEYS_128; i++)
 1839              		.loc 1 356 17
 1840 0010 0123     		movs	r3, #1
 1841 0012 BB60     		str	r3, [r7, #8]
 1842              		.loc 1 356 5
 1843 0014 17E0     		b	.L42
 1844              	.L44:
 357:Core/src/aes.c ****     {
 358:Core/src/aes.c ****         AES_AddRoundKey(state, *roundKey--);
 1845              		.loc 1 358 9
 1846 0016 FB68     		ldr	r3, [r7, #12]
 1847 0018 A3F11002 		sub	r2, r3, #16
 1848 001c FA60     		str	r2, [r7, #12]
 1849 001e 1946     		mov	r1, r3
 1850 0020 7868     		ldr	r0, [r7, #4]
 1851 0022 FFF7FEFF 		bl	AES_AddRoundKey
 359:Core/src/aes.c **** 
 360:Core/src/aes.c ****         // No column mix in the first round
 361:Core/src/aes.c ****         if (i != 1)
 1852              		.loc 1 361 12
 1853 0026 BB68     		ldr	r3, [r7, #8]
 1854 0028 012B     		cmp	r3, #1
 1855 002a 02D0     		beq	.L43
 362:Core/src/aes.c ****         {
 363:Core/src/aes.c ****             AES_InvMixColumns(state);
 1856              		.loc 1 363 13
 1857 002c 7868     		ldr	r0, [r7, #4]
 1858 002e FFF7FEFF 		bl	AES_InvMixColumns
 1859              	.L43:
 364:Core/src/aes.c ****         }
 365:Core/src/aes.c **** 
 366:Core/src/aes.c ****         AES_InvShiftRows(state);
 1860              		.loc 1 366 9
 1861 0032 7868     		ldr	r0, [r7, #4]
 1862 0034 FFF7FEFF 		bl	AES_InvShiftRows
ARM GAS  /tmp/ccj5JV0U.s 			page 42


 367:Core/src/aes.c ****         AES_SubBytes(state, sbox_decrypt);
 1863              		.loc 1 367 9
 1864 0038 0849     		ldr	r1, .L45
 1865 003a 7868     		ldr	r0, [r7, #4]
 1866 003c FFF7FEFF 		bl	AES_SubBytes
 356:Core/src/aes.c ****     {
 1867              		.loc 1 356 49 discriminator 2
 1868 0040 BB68     		ldr	r3, [r7, #8]
 1869 0042 0133     		adds	r3, r3, #1
 1870 0044 BB60     		str	r3, [r7, #8]
 1871              	.L42:
 356:Core/src/aes.c ****     {
 1872              		.loc 1 356 26 discriminator 1
 1873 0046 BB68     		ldr	r3, [r7, #8]
 1874 0048 0A2B     		cmp	r3, #10
 1875 004a E4D9     		bls	.L44
 1876              	.LBE12:
 368:Core/src/aes.c ****     }
 369:Core/src/aes.c **** 
 370:Core/src/aes.c ****     // Last key addition
 371:Core/src/aes.c ****     AES_AddRoundKey(state, *roundKey);
 1877              		.loc 1 371 5
 1878 004c F968     		ldr	r1, [r7, #12]
 1879 004e 7868     		ldr	r0, [r7, #4]
 1880 0050 FFF7FEFF 		bl	AES_AddRoundKey
 372:Core/src/aes.c **** }...
 1881              		.loc 1 372 1
 1882 0054 00BF     		nop
 1883 0056 1037     		adds	r7, r7, #16
 1884              	.LCFI71:
 1885              		.cfi_def_cfa_offset 8
 1886 0058 BD46     		mov	sp, r7
 1887              	.LCFI72:
 1888              		.cfi_def_cfa_register 13
 1889              		@ sp needed
 1890 005a 80BD     		pop	{r7, pc}
 1891              	.L46:
 1892              		.align	2
 1893              	.L45:
 1894 005c 00000000 		.word	sbox_decrypt
 1895              		.cfi_endproc
 1896              	.LFE125:
 1898              		.text
 1899              	.Letext0:
 1900              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1901              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1902              		.file 4 "/usr/lib/gcc/arm-none-eabi/14.1.0/include/stddef.h"
 1903              		.file 5 "Core/inc/aes.h"
 1904              		.file 6 "/usr/arm-none-eabi/include/string.h"
ARM GAS  /tmp/ccj5JV0U.s 			page 43


DEFINED SYMBOLS
                            *ABS*:00000000 aes.c
     /tmp/ccj5JV0U.s:21     .text.GF_Mult:00000000 $t
     /tmp/ccj5JV0U.s:27     .text.GF_Mult:00000000 GF_Mult
     /tmp/ccj5JV0U.s:125    .text.GF_WordAdd:00000000 $t
     /tmp/ccj5JV0U.s:131    .text.GF_WordAdd:00000000 GF_WordAdd
     /tmp/ccj5JV0U.s:229    .rodata.sbox_encrypt:00000000 sbox_encrypt
     /tmp/ccj5JV0U.s:226    .rodata.sbox_encrypt:00000000 $d
     /tmp/ccj5JV0U.s:250    .rodata.sbox_decrypt:00000000 sbox_decrypt
     /tmp/ccj5JV0U.s:247    .rodata.sbox_decrypt:00000000 $d
     /tmp/ccj5JV0U.s:271    .data.Rcon:00000000 Rcon
     /tmp/ccj5JV0U.s:268    .data.Rcon:00000000 $d
     /tmp/ccj5JV0U.s:283    .text.AES_KeySchedule128:00000000 $t
     /tmp/ccj5JV0U.s:289    .text.AES_KeySchedule128:00000000 AES_KeySchedule128
     /tmp/ccj5JV0U.s:445    .text.AES_RotWord:00000000 AES_RotWord
     /tmp/ccj5JV0U.s:620    .text.AES_SubWord:00000000 AES_SubWord
     /tmp/ccj5JV0U.s:433    .text.AES_KeySchedule128:000000cc $d
     /tmp/ccj5JV0U.s:439    .text.AES_RotWord:00000000 $t
     /tmp/ccj5JV0U.s:510    .text.AES_SubBytes:00000000 $t
     /tmp/ccj5JV0U.s:516    .text.AES_SubBytes:00000000 AES_SubBytes
     /tmp/ccj5JV0U.s:614    .text.AES_SubWord:00000000 $t
     /tmp/ccj5JV0U.s:694    .text.AES_ShiftRows:00000000 $t
     /tmp/ccj5JV0U.s:700    .text.AES_ShiftRows:00000000 AES_ShiftRows
     /tmp/ccj5JV0U.s:852    .text.AES_InvShiftRows:00000000 $t
     /tmp/ccj5JV0U.s:858    .text.AES_InvShiftRows:00000000 AES_InvShiftRows
     /tmp/ccj5JV0U.s:1010   .text.AES_MixColumns:00000000 $t
     /tmp/ccj5JV0U.s:1016   .text.AES_MixColumns:00000000 AES_MixColumns
     /tmp/ccj5JV0U.s:1292   .text.AES_InvMixColumns:00000000 $t
     /tmp/ccj5JV0U.s:1298   .text.AES_InvMixColumns:00000000 AES_InvMixColumns
     /tmp/ccj5JV0U.s:1608   .text.AES_AddRoundKey:00000000 $t
     /tmp/ccj5JV0U.s:1614   .text.AES_AddRoundKey:00000000 AES_AddRoundKey
     /tmp/ccj5JV0U.s:1716   .text.AES_EncryptBlock:00000000 $t
     /tmp/ccj5JV0U.s:1722   .text.AES_EncryptBlock:00000000 AES_EncryptBlock
     /tmp/ccj5JV0U.s:1804   .text.AES_EncryptBlock:00000064 $d
     /tmp/ccj5JV0U.s:1809   .text.AES_DecryptBlock:00000000 $t
     /tmp/ccj5JV0U.s:1815   .text.AES_DecryptBlock:00000000 AES_DecryptBlock
     /tmp/ccj5JV0U.s:1894   .text.AES_DecryptBlock:0000005c $d
                           .group:00000000 wm4.0.62e24ee945655210df7a12269291771b
                           .group:00000000 wm4.stm32f4xx.h.54.f84a67a8e71ba9719846fdff1868826c
                           .group:00000000 wm4.core_cm4.h.32.5f62939b60122629d60d85d0c4a14709
                           .group:00000000 wm4._newlib_version.h.4.411db44ea2338a62eca2f0777f81481b
                           .group:00000000 wm4.features.h.33.2eefb68b261e70563a8ac654e712169f
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:00000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:00000000 wm4.stm32f4xx.h.289.fa68dcae75666a037ce29b5a1b57e3b3
                           .group:00000000 wm4.stm32f4xx_conf.h.3.bc52e76ab6b5c9037500dbf5bb8f9be4
                           .group:00000000 wm4.misc.h.86.a3996e7f17199502fad3c7f62e5cdb3f
                           .group:00000000 wm4.stm32f4xx_adc.h.31.d96d805acd0f0c0392ec4633757dead3
                           .group:00000000 wm4.stm32f4xx_can.h.31.3bb56c6436c7a6e6af1611046e81f48c
                           .group:00000000 wm4.stm32f4xx_cryp.h.31.94bbbb19b99df10306f31e78c333a77b
                           .group:00000000 wm4.stm32f4xx_dac.h.31.b8d45e7eaf71ee4bf01c1317dbc06f77
                           .group:00000000 wm4.stm32f4xx_dbgmcu.h.30.70a81ec54c2707baa9fca77391eeeaaa
ARM GAS  /tmp/ccj5JV0U.s 			page 44


                           .group:00000000 wm4.stm32f4xx_dcmi.h.30.9d0942d58c357d2eed15e044bf9b4a77
                           .group:00000000 wm4.stm32f4xx_dma.h.31.815bb924b30b1c776b3cd51113fdfe60
                           .group:00000000 wm4.stm32f4xx_exti.h.31.86bd18e979f97217bb1d3b80fde0231e
                           .group:00000000 wm4.stm32f4xx_flash.h.31.74f2ed42d890f144ca7eb5ae8172f0d0
                           .group:00000000 wm4.stm32f4xx_fsmc.h.31.ff58629e0c603fb2f9b3f00c0657fdfa
                           .group:00000000 wm4.stm32f4xx_gpio.h.31.d9aeae10cfa353d85d475c0d4900c452
                           .group:00000000 wm4.stm32f4xx_hash.h.31.5c109425d30f0b9cc0a26ad38182d91f
                           .group:00000000 wm4.stm32f4xx_i2c.h.31.edf5baa611075c49ae13f56be9040be3
                           .group:00000000 wm4.stm32f4xx_iwdg.h.31.30e376e6d8d424aab7fddd66cf691c7b
                           .group:00000000 wm4.stm32f4xx_pwr.h.31.bb774fc1b632cb8d2ecaec8c6524d2c0
                           .group:00000000 wm4.stm32f4xx_rcc.h.30.820e94551583d2b835c8cf3ad722e16c
                           .group:00000000 wm4.stm32f4xx_rng.h.31.1ec493d56b7a8e5a71238519cae6dea7
                           .group:00000000 wm4.stm32f4xx_rtc.h.31.bddeb98c63c8fa06fac80b5dd8296471
                           .group:00000000 wm4.stm32f4xx_sdio.h.31.8c6dff42ffa718b444c3420717601ff2
                           .group:00000000 wm4.stm32f4xx_spi.h.31.fb1b2c8214b87a47d4457633b7c31c3c
                           .group:00000000 wm4.stm32f4xx_syscfg.h.31.5a680f88d55b7816ae613c20f199cbd9
                           .group:00000000 wm4.stm32f4xx_tim.h.31.b1d608fbde729347e4ccf70799e654d2
                           .group:00000000 wm4.stm32f4xx_usart.h.31.f8d29b14aa4d39de5495adcc92749d3c
                           .group:00000000 wm4.stm32f4xx_wwdg.h.31.b45a80fa1ec64984adf786f7e489f31b
                           .group:00000000 wm4.stm32f4xx.h.6975.cdbdae9d5de06f1ba6b770f59cbe4d6c
                           .group:00000000 wm4.stdbool.h.29.c08aa3eec75cf5b9b5003883f43253f0
                           .group:00000000 wm4.newlib.h.7.59e76574e8950a1900b83fbbda2ff693
                           .group:00000000 wm4.ieeefp.h.77.5ad60f72ea25fc152400b550ac118212
                           .group:00000000 wm4.config.h.224.10ee1ad185d877c6e334e6581faab44d
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.185.cbb642e1ccd385e8aa504b15cb7fb086
                           .group:00000000 wm4.cdefs.h.49.56fd742369e655e7e8a7e365e706e208
                           .group:00000000 wm4.stddef.h.39.6817658cc6bc4c7c8354d2009e4a5777
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.158.6f8e08a347b1cff664332fa350bfceb3
                           .group:00000000 wm4._types.h.127.3bdfe3ff8ea2d0985b03d9cbe93480e3
                           .group:00000000 wm4.reent.h.18.25503cdc8b7e55dd0d6ea7b3e5af7a03
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.78.7f0775353a33c852a1479c008f68cd03
                           .group:00000000 wm4.stdio.h.67.0cf8a9c281ab0b348aef5c02e7e48825
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.87.a1e20d2651f9bfb66e51bfbe849db00a
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:00000000 wm4.stddef.h.158.eec8bf00b5213f43d095cb984c5f22e3
                           .group:00000000 wm4.aes.h.6.03c4ff6935308a2ffae8392c08242867

UNDEFINED SYMBOLS
memcpy
