ARM GAS  /tmp/cchbMWZp.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_rng.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c"
  20              		.section	.text.RNG_DeInit,"ax",%progbits
  21              		.align	1
  22              		.global	RNG_DeInit
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	RNG_DeInit:
  28              	.LFB110:
   1:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
   2:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ******************************************************************************
   3:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @file    stm32f4xx_rng.c
   4:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @author  MCD Application Team
   5:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @version V1.0.2
   6:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @date    05-March-2012
   7:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     * @brief This file provides firmware functions to manage the following 
   8:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          functionalities of the Random Number Generator (RNG) peripheral:           
   9:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Initialization and Configuration 
  10:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Get 32 bit Random number      
  11:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Interrupts and flags management       
  12:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
  13:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *  @verbatim
  14:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *                               
  15:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          ===================================================================      
  16:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *                                   How to use this driver
  17:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          ===================================================================          
  18:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          1. Enable The RNG controller clock using 
  19:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_RNG, ENABLE) function.
  20:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *              
  21:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          2. Activate the RNG peripheral using RNG_Cmd() function.
  22:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          
  23:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          3. Wait until the 32 bit Random number Generator contains a valid 
  24:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            random data (using polling/interrupt mode). For more details, 
  25:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            refer to "Interrupts and flags management functions" module 
  26:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            description.
  27:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           
  28:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          4. Get the 32 bit Random number using RNG_GetRandomNumber() function
  29:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          
  30:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          5. To get another 32 bit Random number, go to step 3.       
ARM GAS  /tmp/cchbMWZp.s 			page 2


  31:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  32:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
  33:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *              
  34:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *  @endverbatim
  35:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
  36:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ******************************************************************************
  37:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @attention
  38:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  39:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  40:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  41:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  42:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * You may not use this file except in compliance with the License.
  43:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * You may obtain a copy of the License at:
  44:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  45:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  46:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  47:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * Unless required by applicable law or agreed to in writing, software 
  48:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  49:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  50:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * See the License for the specific language governing permissions and
  51:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * limitations under the License.
  52:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  53:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ******************************************************************************
  54:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
  55:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  56:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Includes ------------------------------------------------------------------*/
  57:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** #include "stm32f4xx_rng.h"
  58:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** #include "stm32f4xx_rcc.h"
  59:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  60:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  61:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  62:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
  63:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  64:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG 
  65:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief RNG driver modules
  66:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  67:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */ 
  68:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  69:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private typedef -----------------------------------------------------------*/
  70:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private define ------------------------------------------------------------*/
  71:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private macro -------------------------------------------------------------*/
  72:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private variables ---------------------------------------------------------*/
  73:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private function prototypes -----------------------------------------------*/
  74:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private functions ---------------------------------------------------------*/
  75:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  76:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Private_Functions
  77:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  78:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */ 
  79:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  80:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group1 Initialization and Configuration functions
  81:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *  @brief    Initialization and Configuration functions 
  82:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *
  83:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @verbatim    
  84:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================
  85:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                       Initialization and Configuration functions
  86:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================  
  87:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   This section provides functions allowing to 
ARM GAS  /tmp/cchbMWZp.s 			page 3


  88:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    - Initialize the RNG peripheral
  89:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    - Enable or disable the RNG peripheral
  90:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
  91:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @endverbatim
  92:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  93:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
  94:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  95:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
  96:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Deinitializes the RNG peripheral registers to their default reset values.
  97:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  None
  98:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
  99:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 100:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_DeInit(void)
 101:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
  29              		.loc 1 101 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 00AF     		add	r7, sp, #0
  39              	.LCFI1:
  40              		.cfi_def_cfa_register 7
 102:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Enable RNG reset state */
 103:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
  41              		.loc 1 103 3
  42 0004 0121     		movs	r1, #1
  43 0006 4020     		movs	r0, #64
  44 0008 FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
 104:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 105:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Release RNG from reset state */
 106:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
  45              		.loc 1 106 3
  46 000c 0021     		movs	r1, #0
  47 000e 4020     		movs	r0, #64
  48 0010 FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
 107:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
  49              		.loc 1 107 1
  50 0014 00BF     		nop
  51 0016 80BD     		pop	{r7, pc}
  52              		.cfi_endproc
  53              	.LFE110:
  55              		.section	.text.RNG_Cmd,"ax",%progbits
  56              		.align	1
  57              		.global	RNG_Cmd
  58              		.syntax unified
  59              		.thumb
  60              		.thumb_func
  62              	RNG_Cmd:
  63              	.LFB111:
 108:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 109:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 110:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Enables or disables the RNG peripheral.
 111:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  NewState: new state of the RNG peripheral.
ARM GAS  /tmp/cchbMWZp.s 			page 4


 112:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be: ENABLE or DISABLE.
 113:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 114:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 115:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_Cmd(FunctionalState NewState)
 116:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
  64              		.loc 1 116 1
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 8
  67              		@ frame_needed = 1, uses_anonymous_args = 0
  68              		@ link register save eliminated.
  69 0000 80B4     		push	{r7}
  70              	.LCFI2:
  71              		.cfi_def_cfa_offset 4
  72              		.cfi_offset 7, -4
  73 0002 83B0     		sub	sp, sp, #12
  74              	.LCFI3:
  75              		.cfi_def_cfa_offset 16
  76 0004 00AF     		add	r7, sp, #0
  77              	.LCFI4:
  78              		.cfi_def_cfa_register 7
  79 0006 0346     		mov	r3, r0
  80 0008 FB71     		strb	r3, [r7, #7]
 117:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 118:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 119:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 120:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if (NewState != DISABLE)
  81              		.loc 1 120 6
  82 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  83 000c 002B     		cmp	r3, #0
  84 000e 06D0     		beq	.L3
 121:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 122:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Enable the RNG */
 123:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR |= RNG_CR_RNGEN;
  85              		.loc 1 123 8
  86 0010 094B     		ldr	r3, .L6
  87 0012 1B68     		ldr	r3, [r3]
  88 0014 084A     		ldr	r2, .L6
  89              		.loc 1 123 13
  90 0016 43F00403 		orr	r3, r3, #4
  91 001a 1360     		str	r3, [r2]
 124:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 125:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 126:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 127:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Disable the RNG */
 128:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR &= ~RNG_CR_RNGEN;
 129:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 130:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
  92              		.loc 1 130 1
  93 001c 05E0     		b	.L5
  94              	.L3:
 128:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
  95              		.loc 1 128 8
  96 001e 064B     		ldr	r3, .L6
  97 0020 1B68     		ldr	r3, [r3]
  98 0022 054A     		ldr	r2, .L6
 128:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
  99              		.loc 1 128 13
ARM GAS  /tmp/cchbMWZp.s 			page 5


 100 0024 23F00403 		bic	r3, r3, #4
 101 0028 1360     		str	r3, [r2]
 102              	.L5:
 103              		.loc 1 130 1
 104 002a 00BF     		nop
 105 002c 0C37     		adds	r7, r7, #12
 106              	.LCFI5:
 107              		.cfi_def_cfa_offset 4
 108 002e BD46     		mov	sp, r7
 109              	.LCFI6:
 110              		.cfi_def_cfa_register 13
 111              		@ sp needed
 112 0030 5DF8047B 		ldr	r7, [sp], #4
 113              	.LCFI7:
 114              		.cfi_restore 7
 115              		.cfi_def_cfa_offset 0
 116 0034 7047     		bx	lr
 117              	.L7:
 118 0036 00BF     		.align	2
 119              	.L6:
 120 0038 00080650 		.word	1342572544
 121              		.cfi_endproc
 122              	.LFE111:
 124              		.section	.text.RNG_GetRandomNumber,"ax",%progbits
 125              		.align	1
 126              		.global	RNG_GetRandomNumber
 127              		.syntax unified
 128              		.thumb
 129              		.thumb_func
 131              	RNG_GetRandomNumber:
 132              	.LFB112:
 131:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 132:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @}
 133:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 134:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 135:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group2 Get 32 bit Random number function
 136:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *  @brief    Get 32 bit Random number function 
 137:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *
 138:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 139:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @verbatim    
 140:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================
 141:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                       Get 32 bit Random number function
 142:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================  
 143:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   This section provides a function allowing to get the 32 bit Random number  
 144:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 145:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   @note  Before to call this function you have to wait till DRDY flag is set,
 146:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****          using RNG_GetFlagStatus(RNG_FLAG_DRDY) function. 
 147:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
 148:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @endverbatim
 149:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
 150:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 151:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 152:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 153:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 154:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Returns a 32-bit random number.
 155:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *   
 156:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   Before to call this function you have to wait till DRDY (data ready)
ARM GAS  /tmp/cchbMWZp.s 			page 6


 157:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         flag is set, using RNG_GetFlagStatus(RNG_FLAG_DRDY) function.
 158:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   Each time the the Random number data is read (using RNG_GetRandomNumber()
 159:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         function), the RNG_FLAG_DRDY flag is automatically cleared.
 160:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   In the case of a seed error, the generation of random numbers is 
 161:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         interrupted for as long as the SECS bit is '1'. If a number is 
 162:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         available in the RNG_DR register, it must not be used because it may 
 163:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         not have enough entropy. In this case, it is recommended to clear the 
 164:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         SEIS bit(using RNG_ClearFlag(RNG_FLAG_SECS) function), then disable 
 165:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         and enable the RNG peripheral (using RNG_Cmd() function) to 
 166:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         reinitialize and restart the RNG.
 167:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   In the case of a clock error, the RNG is no more able to generate 
 168:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         random numbers because the PLL48CLK clock is not correct. User have 
 169:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         to check that the clock controller is correctly configured to provide
 170:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         the RNG clock and clear the CEIS bit (using RNG_ClearFlag(RNG_FLAG_CECS) 
 171:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         function) . The clock error has no impact on the previously generated 
 172:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         random numbers, and the RNG_DR register contents can be used.
 173:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
 174:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  None
 175:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval 32-bit random number.
 176:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 177:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** uint32_t RNG_GetRandomNumber(void)
 178:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 133              		.loc 1 178 1
 134              		.cfi_startproc
 135              		@ args = 0, pretend = 0, frame = 0
 136              		@ frame_needed = 1, uses_anonymous_args = 0
 137              		@ link register save eliminated.
 138 0000 80B4     		push	{r7}
 139              	.LCFI8:
 140              		.cfi_def_cfa_offset 4
 141              		.cfi_offset 7, -4
 142 0002 00AF     		add	r7, sp, #0
 143              	.LCFI9:
 144              		.cfi_def_cfa_register 7
 179:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Return the 32 bit random number from the DR register */
 180:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   return RNG->DR;
 145              		.loc 1 180 13
 146 0004 034B     		ldr	r3, .L10
 147 0006 9B68     		ldr	r3, [r3, #8]
 181:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 148              		.loc 1 181 1
 149 0008 1846     		mov	r0, r3
 150 000a BD46     		mov	sp, r7
 151              	.LCFI10:
 152              		.cfi_def_cfa_register 13
 153              		@ sp needed
 154 000c 5DF8047B 		ldr	r7, [sp], #4
 155              	.LCFI11:
 156              		.cfi_restore 7
 157              		.cfi_def_cfa_offset 0
 158 0010 7047     		bx	lr
 159              	.L11:
 160 0012 00BF     		.align	2
 161              	.L10:
 162 0014 00080650 		.word	1342572544
 163              		.cfi_endproc
 164              	.LFE112:
ARM GAS  /tmp/cchbMWZp.s 			page 7


 166              		.section	.text.RNG_ITConfig,"ax",%progbits
 167              		.align	1
 168              		.global	RNG_ITConfig
 169              		.syntax unified
 170              		.thumb
 171              		.thumb_func
 173              	RNG_ITConfig:
 174              	.LFB113:
 182:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 183:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 184:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 185:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @}
 186:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 187:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 188:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group3 Interrupts and flags management functions
 189:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *  @brief   Interrupts and flags management functions
 190:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *
 191:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @verbatim   
 192:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================
 193:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                    Interrupts and flags management functions
 194:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================  
 195:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 196:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   This section provides functions allowing to configure the RNG Interrupts and 
 197:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   to get the status and clear flags and Interrupts pending bits.
 198:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 199:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   The RNG provides 3 Interrupts sources and 3 Flags:
 200:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 201:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   Flags :
 202:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ---------- 
 203:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****      1. RNG_FLAG_DRDY :  In the case of the RNG_DR register contains valid 
 204:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                          random data. it is cleared by reading the valid data 
 205:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                          (using RNG_GetRandomNumber() function).
 206:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 207:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****      2. RNG_FLAG_CECS : In the case of a seed error detection. 
 208:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       
 209:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****      3. RNG_FLAG_SECS : In the case of a clock error detection.
 210:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****               
 211:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 212:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   Interrupts :
 213:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ------------
 214:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    if enabled, an RNG interrupt is pending :
 215:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     
 216:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    1.  In the case of the RNG_DR register contains valid random data. 
 217:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        This interrupt source is cleared once the RNG_DR register has been read 
 218:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        (using RNG_GetRandomNumber() function) until a new valid value is 
 219:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        computed. 
 220:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
 221:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    or 
 222:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    2. In the case of a seed error : One of the following faulty sequences has 
 223:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       been detected:
 224:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - More than 64 consecutive bits at the same value (0 or 1)
 225:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - More than 32 consecutive alternance of 0 and 1 (0101010101...01)
 226:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       This interrupt source is cleared using RNG_ClearITPendingBit(RNG_IT_SEI)
 227:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       function.
 228:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
 229:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    or
 230:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    3. In the case of a clock error : the PLL48CLK (RNG peripheral clock source) 
ARM GAS  /tmp/cchbMWZp.s 			page 8


 231:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       was not correctly detected (fPLL48CLK< fHCLK/16).
 232:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       This interrupt source is cleared using RNG_ClearITPendingBit(RNG_IT_CEI)
 233:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       function.
 234:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       @note In this case, User have to check that the clock controller is 
 235:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****             correctly configured to provide the RNG clock. 
 236:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 237:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   Managing the RNG controller events :
 238:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ------------------------------------ 
 239:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   The user should identify which mode will be used in his application to manage 
 240:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   the RNG controller events: Polling mode or Interrupt mode.
 241:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 242:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   1.  In the Polling Mode it is advised to use the following functions:
 243:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_GetFlagStatus() : to check if flags events occur. 
 244:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_ClearFlag()     : to clear the flags events.
 245:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 246:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   @note RNG_FLAG_DRDY can not be cleared by RNG_ClearFlag(). it is cleared only 
 247:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****         by reading the Random number data.      
 248:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 249:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   2.  In the Interrupt Mode it is advised to use the following functions:
 250:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_ITConfig()       : to enable or disable the interrupt source.
 251:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_GetITStatus()    : to check if Interrupt occurs.
 252:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_ClearITPendingBit() : to clear the Interrupt pending Bit 
 253:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                                 (corresponding Flag). 
 254:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 255:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 256:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @endverbatim
 257:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
 258:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */ 
 259:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 260:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 261:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Enables or disables the RNG interrupt.
 262:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   The RNG provides 3 interrupt sources,
 263:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Computed data is ready event (DRDY), and           
 264:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Seed error Interrupt (SEI) and 
 265:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Clock error Interrupt (CEI), 
 266:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         all these interrupts sources are enabled by setting the IE bit in 
 267:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         CR register. However, each interrupt have its specific status bit
 268:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         (see RNG_GetITStatus() function) and clear bit except the DRDY event
 269:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         (see RNG_ClearITPendingBit() function).
 270:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  NewState: new state of the RNG interrupt.
 271:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be: ENABLE or DISABLE.
 272:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 273:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 274:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_ITConfig(FunctionalState NewState)
 275:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 175              		.loc 1 275 1
 176              		.cfi_startproc
 177              		@ args = 0, pretend = 0, frame = 8
 178              		@ frame_needed = 1, uses_anonymous_args = 0
 179              		@ link register save eliminated.
 180 0000 80B4     		push	{r7}
 181              	.LCFI12:
 182              		.cfi_def_cfa_offset 4
 183              		.cfi_offset 7, -4
 184 0002 83B0     		sub	sp, sp, #12
 185              	.LCFI13:
 186              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/cchbMWZp.s 			page 9


 187 0004 00AF     		add	r7, sp, #0
 188              	.LCFI14:
 189              		.cfi_def_cfa_register 7
 190 0006 0346     		mov	r3, r0
 191 0008 FB71     		strb	r3, [r7, #7]
 276:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 277:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 278:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 279:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if (NewState != DISABLE)
 192              		.loc 1 279 6
 193 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 194 000c 002B     		cmp	r3, #0
 195 000e 06D0     		beq	.L13
 280:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 281:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Enable the RNG interrupt */
 282:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR |= RNG_CR_IE;
 196              		.loc 1 282 8
 197 0010 094B     		ldr	r3, .L16
 198 0012 1B68     		ldr	r3, [r3]
 199 0014 084A     		ldr	r2, .L16
 200              		.loc 1 282 13
 201 0016 43F00803 		orr	r3, r3, #8
 202 001a 1360     		str	r3, [r2]
 283:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 284:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 285:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 286:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Disable the RNG interrupt */
 287:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR &= ~RNG_CR_IE;
 288:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 289:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 203              		.loc 1 289 1
 204 001c 05E0     		b	.L15
 205              	.L13:
 287:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 206              		.loc 1 287 8
 207 001e 064B     		ldr	r3, .L16
 208 0020 1B68     		ldr	r3, [r3]
 209 0022 054A     		ldr	r2, .L16
 287:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 210              		.loc 1 287 13
 211 0024 23F00803 		bic	r3, r3, #8
 212 0028 1360     		str	r3, [r2]
 213              	.L15:
 214              		.loc 1 289 1
 215 002a 00BF     		nop
 216 002c 0C37     		adds	r7, r7, #12
 217              	.LCFI15:
 218              		.cfi_def_cfa_offset 4
 219 002e BD46     		mov	sp, r7
 220              	.LCFI16:
 221              		.cfi_def_cfa_register 13
 222              		@ sp needed
 223 0030 5DF8047B 		ldr	r7, [sp], #4
 224              	.LCFI17:
 225              		.cfi_restore 7
 226              		.cfi_def_cfa_offset 0
 227 0034 7047     		bx	lr
ARM GAS  /tmp/cchbMWZp.s 			page 10


 228              	.L17:
 229 0036 00BF     		.align	2
 230              	.L16:
 231 0038 00080650 		.word	1342572544
 232              		.cfi_endproc
 233              	.LFE113:
 235              		.section	.text.RNG_GetFlagStatus,"ax",%progbits
 236              		.align	1
 237              		.global	RNG_GetFlagStatus
 238              		.syntax unified
 239              		.thumb
 240              		.thumb_func
 242              	RNG_GetFlagStatus:
 243              	.LFB114:
 290:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 291:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 292:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Checks whether the specified RNG flag is set or not.
 293:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_FLAG: specifies the RNG flag to check.
 294:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be one of the following values:
 295:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_DRDY: Data Ready flag.
 296:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_CECS: Clock Error Current flag.
 297:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_SECS: Seed Error Current flag.
 298:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval The new state of RNG_FLAG (SET or RESET).
 299:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 300:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
 301:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 244              		.loc 1 301 1
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 16
 247              		@ frame_needed = 1, uses_anonymous_args = 0
 248              		@ link register save eliminated.
 249 0000 80B4     		push	{r7}
 250              	.LCFI18:
 251              		.cfi_def_cfa_offset 4
 252              		.cfi_offset 7, -4
 253 0002 85B0     		sub	sp, sp, #20
 254              	.LCFI19:
 255              		.cfi_def_cfa_offset 24
 256 0004 00AF     		add	r7, sp, #0
 257              	.LCFI20:
 258              		.cfi_def_cfa_register 7
 259 0006 0346     		mov	r3, r0
 260 0008 FB71     		strb	r3, [r7, #7]
 302:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   FlagStatus bitstatus = RESET;
 261              		.loc 1 302 14
 262 000a 0023     		movs	r3, #0
 263 000c FB73     		strb	r3, [r7, #15]
 303:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 304:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_GET_FLAG(RNG_FLAG));
 305:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 306:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the status of the specified RNG flag */
 307:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 264              		.loc 1 307 11
 265 000e 094B     		ldr	r3, .L22
 266 0010 5A68     		ldr	r2, [r3, #4]
 267              		.loc 1 307 16
 268 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  /tmp/cchbMWZp.s 			page 11


 269 0014 1340     		ands	r3, r3, r2
 270              		.loc 1 307 6
 271 0016 002B     		cmp	r3, #0
 272 0018 02D0     		beq	.L19
 308:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 309:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_FLAG is set */
 310:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = SET;
 273              		.loc 1 310 15
 274 001a 0123     		movs	r3, #1
 275 001c FB73     		strb	r3, [r7, #15]
 276 001e 01E0     		b	.L20
 277              	.L19:
 311:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 312:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 313:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 314:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_FLAG is reset */
 315:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = RESET;
 278              		.loc 1 315 15
 279 0020 0023     		movs	r3, #0
 280 0022 FB73     		strb	r3, [r7, #15]
 281              	.L20:
 316:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 317:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Return the RNG_FLAG status */
 318:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   return  bitstatus;
 282              		.loc 1 318 11
 283 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 319:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 284              		.loc 1 319 1
 285 0026 1846     		mov	r0, r3
 286 0028 1437     		adds	r7, r7, #20
 287              	.LCFI21:
 288              		.cfi_def_cfa_offset 4
 289 002a BD46     		mov	sp, r7
 290              	.LCFI22:
 291              		.cfi_def_cfa_register 13
 292              		@ sp needed
 293 002c 5DF8047B 		ldr	r7, [sp], #4
 294              	.LCFI23:
 295              		.cfi_restore 7
 296              		.cfi_def_cfa_offset 0
 297 0030 7047     		bx	lr
 298              	.L23:
 299 0032 00BF     		.align	2
 300              	.L22:
 301 0034 00080650 		.word	1342572544
 302              		.cfi_endproc
 303              	.LFE114:
 305              		.section	.text.RNG_ClearFlag,"ax",%progbits
 306              		.align	1
 307              		.global	RNG_ClearFlag
 308              		.syntax unified
 309              		.thumb
 310              		.thumb_func
 312              	RNG_ClearFlag:
 313              	.LFB115:
 320:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 321:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
ARM GAS  /tmp/cchbMWZp.s 			page 12


 322:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 323:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Clears the RNG flags.
 324:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_FLAG: specifies the flag to clear. 
 325:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be any combination of the following values:
 326:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_CECS: Clock Error Current flag.
 327:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_SECS: Seed Error Current flag.
 328:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   RNG_FLAG_DRDY can not be cleared by RNG_ClearFlag() function. 
 329:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         This flag is cleared only by reading the Random number data (using 
 330:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         RNG_GetRandomNumber() function).                           
 331:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 332:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 333:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_ClearFlag(uint8_t RNG_FLAG)
 334:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 314              		.loc 1 334 1
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 8
 317              		@ frame_needed = 1, uses_anonymous_args = 0
 318              		@ link register save eliminated.
 319 0000 80B4     		push	{r7}
 320              	.LCFI24:
 321              		.cfi_def_cfa_offset 4
 322              		.cfi_offset 7, -4
 323 0002 83B0     		sub	sp, sp, #12
 324              	.LCFI25:
 325              		.cfi_def_cfa_offset 16
 326 0004 00AF     		add	r7, sp, #0
 327              	.LCFI26:
 328              		.cfi_def_cfa_register 7
 329 0006 0346     		mov	r3, r0
 330 0008 FB71     		strb	r3, [r7, #7]
 335:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 336:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
 337:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Clear the selected RNG flags */
 338:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 331              		.loc 1 338 26
 332 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 333              		.loc 1 338 14
 334 000c 1B01     		lsls	r3, r3, #4
 335              		.loc 1 338 6
 336 000e 044A     		ldr	r2, .L25
 337              		.loc 1 338 13
 338 0010 DB43     		mvns	r3, r3
 339              		.loc 1 338 11
 340 0012 5360     		str	r3, [r2, #4]
 339:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 341              		.loc 1 339 1
 342 0014 00BF     		nop
 343 0016 0C37     		adds	r7, r7, #12
 344              	.LCFI27:
 345              		.cfi_def_cfa_offset 4
 346 0018 BD46     		mov	sp, r7
 347              	.LCFI28:
 348              		.cfi_def_cfa_register 13
 349              		@ sp needed
 350 001a 5DF8047B 		ldr	r7, [sp], #4
 351              	.LCFI29:
 352              		.cfi_restore 7
ARM GAS  /tmp/cchbMWZp.s 			page 13


 353              		.cfi_def_cfa_offset 0
 354 001e 7047     		bx	lr
 355              	.L26:
 356              		.align	2
 357              	.L25:
 358 0020 00080650 		.word	1342572544
 359              		.cfi_endproc
 360              	.LFE115:
 362              		.section	.text.RNG_GetITStatus,"ax",%progbits
 363              		.align	1
 364              		.global	RNG_GetITStatus
 365              		.syntax unified
 366              		.thumb
 367              		.thumb_func
 369              	RNG_GetITStatus:
 370              	.LFB116:
 340:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 341:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 342:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Checks whether the specified RNG interrupt has occurred or not.
 343:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_IT: specifies the RNG interrupt source to check.
 344:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be one of the following values:
 345:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_CEI: Clock Error Interrupt.
 346:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
 347:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval The new state of RNG_IT (SET or RESET).
 348:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 349:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** ITStatus RNG_GetITStatus(uint8_t RNG_IT)
 350:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 371              		.loc 1 350 1
 372              		.cfi_startproc
 373              		@ args = 0, pretend = 0, frame = 16
 374              		@ frame_needed = 1, uses_anonymous_args = 0
 375              		@ link register save eliminated.
 376 0000 80B4     		push	{r7}
 377              	.LCFI30:
 378              		.cfi_def_cfa_offset 4
 379              		.cfi_offset 7, -4
 380 0002 85B0     		sub	sp, sp, #20
 381              	.LCFI31:
 382              		.cfi_def_cfa_offset 24
 383 0004 00AF     		add	r7, sp, #0
 384              	.LCFI32:
 385              		.cfi_def_cfa_register 7
 386 0006 0346     		mov	r3, r0
 387 0008 FB71     		strb	r3, [r7, #7]
 351:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ITStatus bitstatus = RESET;
 388              		.loc 1 351 12
 389 000a 0023     		movs	r3, #0
 390 000c FB73     		strb	r3, [r7, #15]
 352:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 353:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_GET_IT(RNG_IT));
 354:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 355:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the status of the specified RNG interrupt */
 356:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 391              		.loc 1 356 11
 392 000e 094B     		ldr	r3, .L31
 393 0010 5A68     		ldr	r2, [r3, #4]
 394              		.loc 1 356 16
ARM GAS  /tmp/cchbMWZp.s 			page 14


 395 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 396 0014 1340     		ands	r3, r3, r2
 397              		.loc 1 356 6
 398 0016 002B     		cmp	r3, #0
 399 0018 02D0     		beq	.L28
 357:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 358:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_IT is set */
 359:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = SET;
 400              		.loc 1 359 15
 401 001a 0123     		movs	r3, #1
 402 001c FB73     		strb	r3, [r7, #15]
 403 001e 01E0     		b	.L29
 404              	.L28:
 360:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 361:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 362:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 363:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_IT is reset */
 364:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = RESET;
 405              		.loc 1 364 15
 406 0020 0023     		movs	r3, #0
 407 0022 FB73     		strb	r3, [r7, #15]
 408              	.L29:
 365:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 366:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Return the RNG_IT status */
 367:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   return bitstatus;
 409              		.loc 1 367 10
 410 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 368:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 411              		.loc 1 368 1
 412 0026 1846     		mov	r0, r3
 413 0028 1437     		adds	r7, r7, #20
 414              	.LCFI33:
 415              		.cfi_def_cfa_offset 4
 416 002a BD46     		mov	sp, r7
 417              	.LCFI34:
 418              		.cfi_def_cfa_register 13
 419              		@ sp needed
 420 002c 5DF8047B 		ldr	r7, [sp], #4
 421              	.LCFI35:
 422              		.cfi_restore 7
 423              		.cfi_def_cfa_offset 0
 424 0030 7047     		bx	lr
 425              	.L32:
 426 0032 00BF     		.align	2
 427              	.L31:
 428 0034 00080650 		.word	1342572544
 429              		.cfi_endproc
 430              	.LFE116:
 432              		.section	.text.RNG_ClearITPendingBit,"ax",%progbits
 433              		.align	1
 434              		.global	RNG_ClearITPendingBit
 435              		.syntax unified
 436              		.thumb
 437              		.thumb_func
 439              	RNG_ClearITPendingBit:
 440              	.LFB117:
 369:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
ARM GAS  /tmp/cchbMWZp.s 			page 15


 370:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 371:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 372:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Clears the RNG interrupt pending bit(s).
 373:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_IT: specifies the RNG interrupt pending bit(s) to clear.
 374:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be any combination of the following values:
 375:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_CEI: Clock Error Interrupt.
 376:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_SEI: Seed Error Interrupt.
 377:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 378:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 379:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_ClearITPendingBit(uint8_t RNG_IT)
 380:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 441              		.loc 1 380 1
 442              		.cfi_startproc
 443              		@ args = 0, pretend = 0, frame = 8
 444              		@ frame_needed = 1, uses_anonymous_args = 0
 445              		@ link register save eliminated.
 446 0000 80B4     		push	{r7}
 447              	.LCFI36:
 448              		.cfi_def_cfa_offset 4
 449              		.cfi_offset 7, -4
 450 0002 83B0     		sub	sp, sp, #12
 451              	.LCFI37:
 452              		.cfi_def_cfa_offset 16
 453 0004 00AF     		add	r7, sp, #0
 454              	.LCFI38:
 455              		.cfi_def_cfa_register 7
 456 0006 0346     		mov	r3, r0
 457 0008 FB71     		strb	r3, [r7, #7]
 381:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 382:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_IT(RNG_IT));
 383:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 384:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Clear the selected RNG interrupt pending bit */
 385:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RNG->SR = (uint8_t)~RNG_IT;
 458              		.loc 1 385 13
 459 000a FB79     		ldrb	r3, [r7, #7]
 460 000c DB43     		mvns	r3, r3
 461 000e DAB2     		uxtb	r2, r3
 462              		.loc 1 385 6
 463 0010 034B     		ldr	r3, .L34
 464              		.loc 1 385 11
 465 0012 5A60     		str	r2, [r3, #4]
 386:../Shared/Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 466              		.loc 1 386 1
 467 0014 00BF     		nop
 468 0016 0C37     		adds	r7, r7, #12
 469              	.LCFI39:
 470              		.cfi_def_cfa_offset 4
 471 0018 BD46     		mov	sp, r7
 472              	.LCFI40:
 473              		.cfi_def_cfa_register 13
 474              		@ sp needed
 475 001a 5DF8047B 		ldr	r7, [sp], #4
 476              	.LCFI41:
 477              		.cfi_restore 7
 478              		.cfi_def_cfa_offset 0
 479 001e 7047     		bx	lr
 480              	.L35:
ARM GAS  /tmp/cchbMWZp.s 			page 16


 481              		.align	2
 482              	.L34:
 483 0020 00080650 		.word	1342572544
 484              		.cfi_endproc
 485              	.LFE117:
 487              		.text
 488              	.Letext0:
 489              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 490              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 491              		.file 4 "../Shared/Libraries/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 492              		.file 5 "../Shared/Libraries/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/cchbMWZp.s 			page 17


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rng.c
     /tmp/cchbMWZp.s:21     .text.RNG_DeInit:00000000 $t
     /tmp/cchbMWZp.s:27     .text.RNG_DeInit:00000000 RNG_DeInit
     /tmp/cchbMWZp.s:56     .text.RNG_Cmd:00000000 $t
     /tmp/cchbMWZp.s:62     .text.RNG_Cmd:00000000 RNG_Cmd
     /tmp/cchbMWZp.s:120    .text.RNG_Cmd:00000038 $d
     /tmp/cchbMWZp.s:125    .text.RNG_GetRandomNumber:00000000 $t
     /tmp/cchbMWZp.s:131    .text.RNG_GetRandomNumber:00000000 RNG_GetRandomNumber
     /tmp/cchbMWZp.s:162    .text.RNG_GetRandomNumber:00000014 $d
     /tmp/cchbMWZp.s:167    .text.RNG_ITConfig:00000000 $t
     /tmp/cchbMWZp.s:173    .text.RNG_ITConfig:00000000 RNG_ITConfig
     /tmp/cchbMWZp.s:231    .text.RNG_ITConfig:00000038 $d
     /tmp/cchbMWZp.s:236    .text.RNG_GetFlagStatus:00000000 $t
     /tmp/cchbMWZp.s:242    .text.RNG_GetFlagStatus:00000000 RNG_GetFlagStatus
     /tmp/cchbMWZp.s:301    .text.RNG_GetFlagStatus:00000034 $d
     /tmp/cchbMWZp.s:306    .text.RNG_ClearFlag:00000000 $t
     /tmp/cchbMWZp.s:312    .text.RNG_ClearFlag:00000000 RNG_ClearFlag
     /tmp/cchbMWZp.s:358    .text.RNG_ClearFlag:00000020 $d
     /tmp/cchbMWZp.s:363    .text.RNG_GetITStatus:00000000 $t
     /tmp/cchbMWZp.s:369    .text.RNG_GetITStatus:00000000 RNG_GetITStatus
     /tmp/cchbMWZp.s:428    .text.RNG_GetITStatus:00000034 $d
     /tmp/cchbMWZp.s:433    .text.RNG_ClearITPendingBit:00000000 $t
     /tmp/cchbMWZp.s:439    .text.RNG_ClearITPendingBit:00000000 RNG_ClearITPendingBit
     /tmp/cchbMWZp.s:483    .text.RNG_ClearITPendingBit:00000020 $d
                           .group:00000000 wm4.0.62e24ee945655210df7a12269291771b
                           .group:00000000 wm4.stm32f4xx.h.54.f84a67a8e71ba9719846fdff1868826c
                           .group:00000000 wm4.core_cm4.h.32.5f62939b60122629d60d85d0c4a14709
                           .group:00000000 wm4._newlib_version.h.4.411db44ea2338a62eca2f0777f81481b
                           .group:00000000 wm4.features.h.33.2eefb68b261e70563a8ac654e712169f
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:00000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:00000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:00000000 wm4.stm32f4xx.h.289.fa68dcae75666a037ce29b5a1b57e3b3
                           .group:00000000 wm4.stm32f4xx_conf.h.3.bc52e76ab6b5c9037500dbf5bb8f9be4
                           .group:00000000 wm4.misc.h.86.a3996e7f17199502fad3c7f62e5cdb3f
                           .group:00000000 wm4.stm32f4xx_adc.h.31.d96d805acd0f0c0392ec4633757dead3
                           .group:00000000 wm4.stm32f4xx_can.h.31.3bb56c6436c7a6e6af1611046e81f48c
                           .group:00000000 wm4.stm32f4xx_cryp.h.31.94bbbb19b99df10306f31e78c333a77b
                           .group:00000000 wm4.stm32f4xx_dac.h.31.b8d45e7eaf71ee4bf01c1317dbc06f77
                           .group:00000000 wm4.stm32f4xx_dbgmcu.h.30.70a81ec54c2707baa9fca77391eeeaaa
                           .group:00000000 wm4.stm32f4xx_dcmi.h.30.9d0942d58c357d2eed15e044bf9b4a77
                           .group:00000000 wm4.stm32f4xx_dma.h.31.815bb924b30b1c776b3cd51113fdfe60
                           .group:00000000 wm4.stm32f4xx_exti.h.31.86bd18e979f97217bb1d3b80fde0231e
                           .group:00000000 wm4.stm32f4xx_flash.h.31.74f2ed42d890f144ca7eb5ae8172f0d0
                           .group:00000000 wm4.stm32f4xx_fsmc.h.31.ff58629e0c603fb2f9b3f00c0657fdfa
                           .group:00000000 wm4.stm32f4xx_gpio.h.31.d9aeae10cfa353d85d475c0d4900c452
                           .group:00000000 wm4.stm32f4xx_hash.h.31.5c109425d30f0b9cc0a26ad38182d91f
                           .group:00000000 wm4.stm32f4xx_i2c.h.31.edf5baa611075c49ae13f56be9040be3
                           .group:00000000 wm4.stm32f4xx_iwdg.h.31.30e376e6d8d424aab7fddd66cf691c7b
                           .group:00000000 wm4.stm32f4xx_pwr.h.31.bb774fc1b632cb8d2ecaec8c6524d2c0
                           .group:00000000 wm4.stm32f4xx_rcc.h.30.820e94551583d2b835c8cf3ad722e16c
                           .group:00000000 wm4.stm32f4xx_rtc.h.31.bddeb98c63c8fa06fac80b5dd8296471
ARM GAS  /tmp/cchbMWZp.s 			page 18


                           .group:00000000 wm4.stm32f4xx_sdio.h.31.8c6dff42ffa718b444c3420717601ff2
                           .group:00000000 wm4.stm32f4xx_spi.h.31.fb1b2c8214b87a47d4457633b7c31c3c
                           .group:00000000 wm4.stm32f4xx_syscfg.h.31.5a680f88d55b7816ae613c20f199cbd9
                           .group:00000000 wm4.stm32f4xx_tim.h.31.b1d608fbde729347e4ccf70799e654d2
                           .group:00000000 wm4.stm32f4xx_usart.h.31.f8d29b14aa4d39de5495adcc92749d3c
                           .group:00000000 wm4.stm32f4xx_wwdg.h.31.b45a80fa1ec64984adf786f7e489f31b
                           .group:00000000 wm4.stm32f4xx.h.6975.cdbdae9d5de06f1ba6b770f59cbe4d6c
                           .group:00000000 wm4.stm32f4xx_rng.h.58.9a2bb297dfeaa88ee36bd7ff98089ef7

UNDEFINED SYMBOLS
RCC_AHB2PeriphResetCmd
